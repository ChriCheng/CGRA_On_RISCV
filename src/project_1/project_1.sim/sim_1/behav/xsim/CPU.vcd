$date
   Mon Apr 15 20:41:51 2024
$end
$version
  2019.2
$end
$timescale
  1ps
$end
$scope module testbench $end
$var integer 32 ! addr $end
$var reg 1 " clk $end
$var reg 1 # rst $end
$var reg 10 $ address [9:0] $end
$var wire 32 % value_o [31:0] $end
$scope module MyTop $end
$var wire 1 & clk $end
$var wire 1 ' rst $end
$var wire 10 ( address [9:0] $end
$var wire 32 % value_o [31:0] $end
$var wire 32 ) douta [31:0] $end
$var wire 32 * pc [31:0] $end
$var wire 32 + instr [31:0] $end
$var wire 32 , mem_rdata [31:0] $end
$var wire 32 - mem_wdata [31:0] $end
$var wire 10 . mem_addr [9:0] $end
$var wire 1 / data_mem_wea $end
$scope module CPU $end
$var wire 1 & clk_i $end
$var wire 10 ( address [9:0] $end
$var wire 1 ' reset $end
$var reg 32 0 value_o [31:0] $end
$var wire 32 * inst_addr [31:0] $end
$var wire 32 + instr [31:0] $end
$var wire 1 / data_mem_wea $end
$var wire 10 . mem_addr [9:0] $end
$var wire 32 - mem_wdata [31:0] $end
$var wire 32 , mem_rdata [31:0] $end
$var wire 4 1 vector_signed_bits [3:0] $end
$var wire 32 2 op_selection [31:0] $end
$var wire 32 3 addPC [31:0] $end
$var wire 32 4 aluData [31:0] $end
$var wire 32 5 RSD [31:0] $end
$var wire 32 6 RTD [31:0] $end
$var wire 32 7 signExData [31:0] $end
$var wire 32 8 MUXop [31:0] $end
$var wire 10 9 ALUfunct_in [9:0] $end
$var wire 3 : alu_ctrl_wire [2:0] $end
$var wire 12 ; pcIm [11:0] $end
$var wire 12 < swIm [11:0] $end
$var wire 1 = isBranch $end
$var wire 1 > rst $end
$var wire 32 ? AddSum_data_o [31:0] $end
$var wire 32 @ pcSelect_data_o [31:0] $end
$var wire 1 A HazradDetect_Hazard_o $end
$var wire 32 B IF_ID_pc_o [31:0] $end
$var wire 32 C shiftLeft_data_o [31:0] $end
$var wire 12 D IF_ID_pcIm_o [11:0] $end
$var wire 32 E IF_ID_inst_o [31:0] $end
$var wire 5 F MEM_WB_RDaddr_o [4:0] $end
$var wire 32 G memToReg_data_o [31:0] $end
$var wire 1 H MEM_WB_RegWrite_o $end
$var wire 1 I Control_immSelect_o $end
$var wire 32 J PCImmExtend_data_o [31:0] $end
$var wire 32 K Registers_RSdata_o [31:0] $end
$var wire 32 L Registers_RTdata_o [31:0] $end
$var wire 32 M Sign_Extend_data_o [31:0] $end
$var wire 5 N MUX_Control_RegDst_o [4:0] $end
$var wire 2 O MUX_Control_ALUOp_o [1:0] $end
$var wire 1 P MUX_Control_ALUSrc_o $end
$var wire 1 Q MUX_Control_RegWrite_o $end
$var wire 1 R MUX_Control_MemToReg_o $end
$var wire 1 S MUX_Control_MemRead_o $end
$var wire 1 T MUX_Control_MemWrite_o $end
$var wire 32 U ForwardToData2_data_o [31:0] $end
$var wire 32 V ID_EX_SignExtended_o [31:0] $end
$var wire 1 W ID_EX_ALUSrc_o $end
$var wire 2 X ID_EX_ALUOp_o [1:0] $end
$var wire 32 Y ForwardToData1_data_o [31:0] $end
$var wire 32 Z MUX_ALUSrc_data_o [31:0] $end
$var wire 3 [ ALU_Control_ALUCtrl_o [2:0] $end
$var wire 1 \ ID_EX_MemRead_o $end
$var wire 2 ] Control_ALUOp_o [1:0] $end
$var wire 1 ^ Control_ALUSrc_o $end
$var wire 1 _ Control_RegWrite_o $end
$var wire 1 ` Control_MemToReg_o $end
$var wire 1 a Control_MemRd_o $end
$var wire 1 b Control_MemWr_o $end
$var wire 1 c EX_MEM_RegWrite_o $end
$var wire 5 d EX_MEM_RDaddr_o [4:0] $end
$var wire 5 e ID_EX_RSaddr_o [4:0] $end
$var wire 5 f ID_EX_RTaddr_o [4:0] $end
$var wire 2 g ForwardingUnit_ForwardA_o [1:0] $end
$var wire 32 h ID_EX_RDData0_o [31:0] $end
$var wire 32 i ID_EX_inst_o [31:0] $end
$var wire 32 j EX_MEM_instr_o [31:0] $end
$var wire 32 k EX_MEM_ALUResult_o [31:0] $end
$var wire 2 l ForwardingUnit_ForwardB_o [1:0] $end
$var wire 32 m ID_EX_RDData1_o [31:0] $end
$var wire 32 n ID_EX_pc_o [31:0] $end
$var wire 1 o ALU_Zero_o $end
$var wire 32 p ALU_data_o [31:0] $end
$var wire 5 q ID_EX_RegDst_o [4:0] $end
$var wire 1 r ID_EX_RegWrite_o $end
$var wire 1 s ID_EX_MemToReg_o $end
$var wire 1 t ID_EX_MemWrite_o $end
$var wire 32 u EX_MEM_RDData_o [31:0] $end
$var wire 1 v EX_MEM_MemWrite_o $end
$var wire 1 w EX_MEM_MemRead_o $end
$var wire 1 x EX_MEM_MemToReg_o $end
$var wire 32 y MEM_WB_ALUResult_o [31:0] $end
$var wire 32 z MEM_WB_DataMemReadData_o [31:0] $end
$var wire 1 { MEM_WB_MemToReg_o $end
$var wire 32 | Data_Memory_data_o [31:0] $end
$var wire 32 } data_mem_o [31:0] $end
$var wire 32 ~ reg_o [31:0] $end
$var wire 1 !! RegEqual $end
$var wire 1 "! PC_Branch_Select $end
$var wire 32 #! VALU_v_o [31:0] $end
$var wire 32 $! EX_MEM_VALUResult_o [31:0] $end
$var wire 32 %! aluToDM_data_o [31:0] $end
$var wire 1 &! toDataMemory $end
$var wire 3 '! VALU_Control_VALUCtrl_o [2:0] $end
$var reg 1 (! flag $end
$var wire 1 )! start_i $end
$var reg 8 *! egg1 [7:0] $end
$var reg 8 +! egg2 [7:0] $end
$var reg 8 ,! egg3 [7:0] $end
$var wire 1 -! mem_data $end
$scope module pcSelect $end
$var wire 32 3 data1_i [31:0] $end
$var wire 32 ? data2_i [31:0] $end
$var wire 1 = select_i $end
$var wire 32 @ data_o [31:0] $end
$upscope $end
$scope module PC $end
$var wire 1 & clk_i $end
$var wire 1 )! start_i $end
$var wire 1 A hazardpc_i $end
$var wire 32 @ pc_i [31:0] $end
$var reg 32 .! pc_o [31:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 * data1_in [31:0] $end
$var wire 32 /! data2_in [31:0] $end
$var wire 32 3 data_o [31:0] $end
$upscope $end
$scope module AddSum $end
$var wire 32 B data1_i [31:0] $end
$var wire 32 C data2_i [31:0] $end
$var wire 3 0! ALUCtrl_i [2:0] $end
$var reg 32 1! data_o [31:0] $end
$var reg 1 2! Zero_o $end
$var parameter 3 3! SUM [2:0] $end
$var parameter 3 4! SUB [2:0] $end
$var parameter 3 5! AND [2:0] $end
$var parameter 3 6! OR [2:0] $end
$var parameter 3 7! XOR [2:0] $end
$var parameter 3 8! MUL [2:0] $end
$upscope $end
$scope module shiftLeft $end
$var wire 32 J data_i [31:0] $end
$var wire 32 C data_o [31:0] $end
$upscope $end
$scope module PCImmExtend $end
$var wire 12 D data0_i [11:0] $end
$var wire 12 9! data1_i [11:0] $end
$var wire 1 :! select_i $end
$var wire 32 J data_o [31:0] $end
$upscope $end
$scope module IF_ID $end
$var wire 1 & clk_i $end
$var wire 1 A hazard_i $end
$var wire 1 "! flush_i $end
$var wire 1 )! start_i $end
$var wire 32 + inst_i [31:0] $end
$var wire 32 * pc_i [31:0] $end
$var wire 12 ; pcIm_i [11:0] $end
$var reg 32 ;! pc_o [31:0] $end
$var reg 32 <! inst_o [31:0] $end
$var reg 12 =! pcIm_o [11:0] $end
$upscope $end
$scope module Control $end
$var wire 7 >! Op_i [6:0] $end
$var reg 1 ?! RegDst_o $end
$var reg 2 @! ALUOp_o [1:0] $end
$var reg 1 A! ALUSrc_o $end
$var reg 1 B! immSelect_o $end
$var reg 1 C! RegWrite_o $end
$var reg 1 D! MemRd_o $end
$var reg 1 E! MemWr_o $end
$var reg 1 F! Branch_o $end
$var reg 1 G! MemToReg_o $end
$var reg 1 H! VMemWr_o $end
$upscope $end
$scope module Registers $end
$var integer 32 I! i $end
$var wire 1 & clk_i $end
$var wire 1 > reset $end
$var wire 10 ( op_address [9:0] $end
$var wire 5 J! RSaddr_i [4:0] $end
$var wire 5 K! RTaddr_i [4:0] $end
$var wire 5 F RDaddr_i [4:0] $end
$var wire 32 G RDdata_i [31:0] $end
$var wire 1 H RegWrite_i $end
$var wire 4 L! is_pos_i [3:0] $end
$var wire 32 K RSdata_o [31:0] $end
$var wire 32 L RTdata_o [31:0] $end
$var wire 32 ~ reg_o [31:0] $end
$upscope $end
$scope module Sign_Extend $end
$var wire 12 M! data0_i [11:0] $end
$var wire 12 N! data1_i [11:0] $end
$var wire 1 I select_i $end
$var wire 32 M data_o [31:0] $end
$upscope $end
$scope module ID_EX $end
$var wire 1 & clk_i $end
$var wire 1 P ALUSrc_i $end
$var wire 1 Q RegWrite_i $end
$var wire 1 R MemToReg_i $end
$var wire 1 S MemRead_i $end
$var wire 1 T MemWrite_i $end
$var wire 1 )! start_i $end
$var wire 32 E inst_i [31:0] $end
$var wire 32 B pc_i [31:0] $end
$var wire 32 K RDData0_i [31:0] $end
$var wire 32 L RDData1_i [31:0] $end
$var wire 32 M SignExtended_i [31:0] $end
$var wire 2 O ALUOp_i [1:0] $end
$var wire 5 N RegDst_i [4:0] $end
$var wire 5 J! RSaddr_i [4:0] $end
$var wire 5 K! RTaddr_i [4:0] $end
$var wire 32 J pcEx_i [31:0] $end
$var wire 1 "! PC_branch_select_i $end
$var reg 1 O! PC_branch_select_o $end
$var reg 1 P! ALUSrc_o $end
$var reg 1 Q! RegWrite_o $end
$var reg 1 R! MemToReg_o $end
$var reg 1 S! MemRead_o $end
$var reg 1 T! MemWrite_o $end
$var reg 32 U! inst_o [31:0] $end
$var reg 32 V! pc_o [31:0] $end
$var reg 32 W! RDData0_o [31:0] $end
$var reg 32 X! RDData1_o [31:0] $end
$var reg 32 Y! SignExtended_o [31:0] $end
$var reg 32 Z! pcEx_o [31:0] $end
$var reg 2 [! ALUOp_o [1:0] $end
$var reg 5 \! RegDst_o [4:0] $end
$var reg 5 ]! RSaddr_o [4:0] $end
$var reg 5 ^! RTaddr_o [4:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 32 U data1_i [31:0] $end
$var wire 32 V data2_i [31:0] $end
$var wire 1 W select_i $end
$var wire 32 Z data_o [31:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 10 9 funct_i [9:0] $end
$var wire 2 X ALUOp_i [1:0] $end
$var reg 3 _! ALUCtrl_o [2:0] $end
$upscope $end
$scope module ALU $end
$var wire 32 Y data1_i [31:0] $end
$var wire 32 Z data2_i [31:0] $end
$var wire 3 [ ALUCtrl_i [2:0] $end
$var reg 32 `! data_o [31:0] $end
$var reg 1 a! Zero_o $end
$var parameter 3 b! SUM [2:0] $end
$var parameter 3 c! SUB [2:0] $end
$var parameter 3 d! AND [2:0] $end
$var parameter 3 e! OR [2:0] $end
$var parameter 3 f! XOR [2:0] $end
$var parameter 3 g! MUL [2:0] $end
$upscope $end
$scope module HazradDetect $end
$var wire 1 \ ID_EX_MemRead_i $end
$var wire 5 K! IF_IDrs1_i [4:0] $end
$var wire 5 J! IF_IDrs2_i [4:0] $end
$var wire 5 J! ID_EXrd_i [4:0] $end
$var wire 1 A Hazard_o $end
$upscope $end
$scope module MUX_Control $end
$var wire 2 ] ALUOp_i [1:0] $end
$var wire 5 h! RegDst_i [4:0] $end
$var wire 1 A Hazard_i $end
$var wire 1 ^ ALUSrc_i $end
$var wire 1 _ RegWrite_i $end
$var wire 1 ` MemToReg_i $end
$var wire 1 a MemRead_i $end
$var wire 1 b MemWrite_i $end
$var reg 2 i! ALUOp_o [1:0] $end
$var reg 5 j! RegDst_o [4:0] $end
$var reg 1 k! ALUSrc_o $end
$var reg 1 l! RegWrite_o $end
$var reg 1 m! MemToReg_o $end
$var reg 1 n! MemRead_o $end
$var reg 1 o! MemWrite_o $end
$upscope $end
$scope module ForwardingUnit $end
$var wire 1 c EX_MEM_RegWrite_i $end
$var wire 1 H MEM_WB_RegWrite_i $end
$var wire 5 e ID_EX_RS_i [4:0] $end
$var wire 5 f ID_EX_RT_i [4:0] $end
$var wire 5 d EX_MEM_RD_i [4:0] $end
$var wire 5 F MEM_WB_RD_i [4:0] $end
$var reg 2 p! ForwardA_o [1:0] $end
$var reg 2 q! ForwardB_o [1:0] $end
$upscope $end
$scope module ForwardToData1 $end
$var wire 2 g select_i [1:0] $end
$var wire 32 h data_i [31:0] $end
$var wire 32 k EX_MEM_i [31:0] $end
$var wire 32 G MEM_WB_i [31:0] $end
$var reg 32 r! data_o [31:0] $end
$upscope $end
$scope module ForwardToData2 $end
$var wire 2 l select_i [1:0] $end
$var wire 32 m data_i [31:0] $end
$var wire 32 k EX_MEM_i [31:0] $end
$var wire 32 G MEM_WB_i [31:0] $end
$var reg 32 s! data_o [31:0] $end
$upscope $end
$scope module EX_MEM $end
$var wire 1 & clk_i $end
$var wire 1 o zero_i $end
$var wire 1 r RegWrite_i $end
$var wire 1 s MemToReg_i $end
$var wire 1 \ MemRead_i $end
$var wire 1 t MemWrite_i $end
$var wire 1 )! start_i $end
$var wire 32 n pc_i [31:0] $end
$var wire 32 p ALUResult_i [31:0] $end
$var wire 32 U RDData_i [31:0] $end
$var wire 32 #! VALUResult_i [31:0] $end
$var wire 5 q RDaddr_i [4:0] $end
$var wire 32 i instr_i [31:0] $end
$var reg 32 t! instr_o [31:0] $end
$var reg 5 u! RDaddr_o [4:0] $end
$var reg 1 v! zero_o $end
$var reg 1 w! RegWrite_o $end
$var reg 1 x! MemToReg_o $end
$var reg 1 y! MemRead_o $end
$var reg 1 z! MemWrite_o $end
$var reg 32 {! pc_o [31:0] $end
$var reg 32 |! ALUResult_o [31:0] $end
$var reg 32 }! RDData_o [31:0] $end
$var reg 32 ~! VALUResult_o [31:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 1 & clk_i $end
$var wire 1 > reset $end
$var wire 5 !" op_addr [4:0] $end
$var wire 32 %! addr_i [31:0] $end
$var wire 32 u data_i [31:0] $end
$var wire 1 v MemWrite_i $end
$var wire 1 w MemRead_i $end
$var integer 32 "" i $end
$var wire 32 | data_o [31:0] $end
$var wire 32 } data_mem_o [31:0] $end
$var wire 32 #" op [31:0] $end
$upscope $end
$scope module MEM_WB $end
$var wire 1 & clk_i $end
$var wire 1 c RegWrite_i $end
$var wire 1 x MemToReg_i $end
$var wire 1 )! start_i $end
$var wire 32 %! ALUResult_i [31:0] $end
$var wire 32 u RDData_i [31:0] $end
$var wire 32 , DataMemReadData_i [31:0] $end
$var wire 5 d RDaddr_i [4:0] $end
$var reg 1 $" RegWrite_o $end
$var reg 1 %" MemToReg_o $end
$var reg 32 &" ALUResult_o [31:0] $end
$var reg 32 '" RDData_o [31:0] $end
$var reg 32 (" DataMemReadData_o [31:0] $end
$var reg 5 )" RDaddr_o [4:0] $end
$upscope $end
$scope module memToReg $end
$var wire 32 y data1_i [31:0] $end
$var wire 32 z data2_i [31:0] $end
$var wire 1 { select_i $end
$var wire 32 G data_o [31:0] $end
$upscope $end
$scope module aluToDM $end
$var wire 32 k data1_i [31:0] $end
$var wire 32 $! data2_i [31:0] $end
$var wire 1 &! select_i $end
$var wire 32 %! data_o [31:0] $end
$upscope $end
$scope module VALU $end
$var wire 32 Y v1_i [31:0] $end
$var wire 32 Z v2_i [31:0] $end
$var wire 3 '! VALUCtrl_i [2:0] $end
$var reg 32 *" v_o [31:0] $end
$var reg 4 +" over [3:0] $end
$var reg 8 ," e1 [7:0] $end
$var reg 8 -" e2 [7:0] $end
$var reg 8 ." e3 [7:0] $end
$var reg 8 /" e4 [7:0] $end
$var reg 8 0" b1 [7:0] $end
$var reg 8 1" b2 [7:0] $end
$var reg 8 2" b3 [7:0] $end
$var reg 8 3" b4 [7:0] $end
$var reg 8 4" b5 [7:0] $end
$var reg 8 5" b6 [7:0] $end
$var reg 8 6" b7 [7:0] $end
$var reg 8 7" b8 [7:0] $end
$var wire 16 8" a1 [15:0] $end
$var wire 16 9" a2 [15:0] $end
$var wire 16 :" a3 [15:0] $end
$var wire 16 ;" a4 [15:0] $end
$var wire 16 <" a5 [15:0] $end
$var wire 16 =" a6 [15:0] $end
$var wire 16 >" a7 [15:0] $end
$var wire 16 ?" a8 [15:0] $end
$var reg 16 @" s1 [15:0] $end
$var reg 16 A" s2 [15:0] $end
$var reg 16 B" s3 [15:0] $end
$var reg 16 C" s4 [15:0] $end
$var parameter 3 D" VSUM [2:0] $end
$var parameter 3 E" VSUB [2:0] $end
$var parameter 3 F" VDP [2:0] $end
$upscope $end
$scope module VALU_Control $end
$var wire 10 9 vfunct_i [9:0] $end
$var reg 3 G" VALUCtrl_o [2:0] $end
$upscope $end
$upscope $end
$scope module inst_rom $end
$var wire 1 & clka $end
$var wire 1 H" ena $end
$var wire 10 I" addra [9:0] $end
$var wire 32 + douta [31:0] $end
$scope module inst $end
$var wire 1 & clka $end
$var wire 1 J" rsta $end
$var wire 1 H" ena $end
$var wire 1 K" regcea $end
$var wire 1 L" wea [0:0] $end
$var wire 10 I" addra [9:0] $end
$var wire 32 M" dina [31:0] $end
$var wire 32 + douta [31:0] $end
$var wire 1 N" clkb $end
$var wire 1 O" rstb $end
$var wire 1 P" enb $end
$var wire 1 Q" regceb $end
$var wire 1 R" web [0:0] $end
$var wire 10 S" addrb [9:0] $end
$var wire 32 T" dinb [31:0] $end
$var wire 32 U" doutb [31:0] $end
$var wire 1 V" injectsbiterr $end
$var wire 1 W" injectdbiterr $end
$var wire 1 X" sbiterr $end
$var wire 1 Y" dbiterr $end
$var wire 10 Z" rdaddrecc [9:0] $end
$var wire 1 [" eccpipece $end
$var wire 1 \" sleep $end
$var wire 1 ]" deepsleep $end
$var wire 1 ^" shutdown $end
$var wire 1 _" rsta_busy $end
$var wire 1 `" rstb_busy $end
$var wire 1 a" s_aclk $end
$var wire 1 b" s_aresetn $end
$var wire 4 c" s_axi_awid [3:0] $end
$var wire 32 d" s_axi_awaddr [31:0] $end
$var wire 8 e" s_axi_awlen [7:0] $end
$var wire 3 f" s_axi_awsize [2:0] $end
$var wire 2 g" s_axi_awburst [1:0] $end
$var wire 1 h" s_axi_awvalid $end
$var wire 1 i" s_axi_awready $end
$var wire 32 j" s_axi_wdata [31:0] $end
$var wire 1 k" s_axi_wstrb [0:0] $end
$var wire 1 l" s_axi_wlast $end
$var wire 1 m" s_axi_wvalid $end
$var wire 1 n" s_axi_wready $end
$var wire 4 o" s_axi_bid [3:0] $end
$var wire 2 p" s_axi_bresp [1:0] $end
$var wire 1 q" s_axi_bvalid $end
$var wire 1 r" s_axi_bready $end
$var wire 4 s" s_axi_arid [3:0] $end
$var wire 32 t" s_axi_araddr [31:0] $end
$var wire 8 u" s_axi_arlen [7:0] $end
$var wire 3 v" s_axi_arsize [2:0] $end
$var wire 2 w" s_axi_arburst [1:0] $end
$var wire 1 x" s_axi_arvalid $end
$var wire 1 y" s_axi_arready $end
$var wire 4 z" s_axi_rid [3:0] $end
$var wire 32 {" s_axi_rdata [31:0] $end
$var wire 2 |" s_axi_rresp [1:0] $end
$var wire 1 }" s_axi_rlast $end
$var wire 1 ~" s_axi_rvalid $end
$var wire 1 !# s_axi_rready $end
$var wire 1 "# s_axi_injectsbiterr $end
$var wire 1 ## s_axi_injectdbiterr $end
$var wire 1 $# s_axi_sbiterr $end
$var wire 1 %# s_axi_dbiterr $end
$var wire 10 &# s_axi_rdaddrecc [9:0] $end
$var wire 1 '# SBITERR $end
$var wire 1 (# DBITERR $end
$var wire 1 )# S_AXI_AWREADY $end
$var wire 1 *# S_AXI_WREADY $end
$var wire 1 +# S_AXI_BVALID $end
$var wire 1 ,# S_AXI_ARREADY $end
$var wire 1 -# S_AXI_RLAST $end
$var wire 1 .# S_AXI_RVALID $end
$var wire 1 /# S_AXI_SBITERR $end
$var wire 1 0# S_AXI_DBITERR $end
$var wire 1 1# WEA [0:0] $end
$var wire 10 2# ADDRA [9:0] $end
$var wire 32 3# DINA [31:0] $end
$var wire 32 4# DOUTA [31:0] $end
$var wire 1 5# WEB [0:0] $end
$var wire 10 6# ADDRB [9:0] $end
$var wire 32 7# DINB [31:0] $end
$var wire 32 8# DOUTB [31:0] $end
$var wire 10 9# RDADDRECC [9:0] $end
$var wire 4 :# S_AXI_AWID [3:0] $end
$var wire 32 ;# S_AXI_AWADDR [31:0] $end
$var wire 8 <# S_AXI_AWLEN [7:0] $end
$var wire 3 =# S_AXI_AWSIZE [2:0] $end
$var wire 2 ># S_AXI_AWBURST [1:0] $end
$var wire 32 ?# S_AXI_WDATA [31:0] $end
$var wire 1 @# S_AXI_WSTRB [0:0] $end
$var wire 4 A# S_AXI_BID [3:0] $end
$var wire 2 B# S_AXI_BRESP [1:0] $end
$var wire 4 C# S_AXI_ARID [3:0] $end
$var wire 32 D# S_AXI_ARADDR [31:0] $end
$var wire 8 E# S_AXI_ARLEN [7:0] $end
$var wire 3 F# S_AXI_ARSIZE [2:0] $end
$var wire 2 G# S_AXI_ARBURST [1:0] $end
$var wire 4 H# S_AXI_RID [3:0] $end
$var wire 32 I# S_AXI_RDATA [31:0] $end
$var wire 2 J# S_AXI_RRESP [1:0] $end
$var wire 10 K# S_AXI_RDADDRECC [9:0] $end
$var wire 1 L# WEB_parameterized [0:0] $end
$var wire 1 M# ECCPIPECE $end
$var wire 1 N# SLEEP $end
$var reg 1 O# RSTA_BUSY $end
$var reg 1 P# RSTB_BUSY $end
$var wire 1 Q# CLKA $end
$var wire 1 R# RSTA $end
$var wire 1 S# ENA $end
$var wire 1 T# REGCEA $end
$var wire 1 U# CLKB $end
$var wire 1 V# RSTB $end
$var wire 1 W# ENB $end
$var wire 1 X# REGCEB $end
$var wire 1 Y# INJECTSBITERR $end
$var wire 1 Z# INJECTDBITERR $end
$var wire 1 [# S_ACLK $end
$var wire 1 \# S_ARESETN $end
$var wire 1 ]# S_AXI_AWVALID $end
$var wire 1 ^# S_AXI_WLAST $end
$var wire 1 _# S_AXI_WVALID $end
$var wire 1 `# S_AXI_BREADY $end
$var wire 1 a# S_AXI_ARVALID $end
$var wire 1 b# S_AXI_RREADY $end
$var wire 1 c# S_AXI_INJECTSBITERR $end
$var wire 1 d# S_AXI_INJECTDBITERR $end
$var reg 1 e# injectsbiterr_in $end
$var reg 1 f# injectdbiterr_in $end
$var reg 1 g# rsta_in $end
$var reg 1 h# ena_in $end
$var reg 1 i# regcea_in $end
$var reg 1 j# wea_in [0:0] $end
$var reg 10 k# addra_in [9:0] $end
$var reg 32 l# dina_in [31:0] $end
$var wire 10 m# s_axi_awaddr_out_c [9:0] $end
$var wire 10 n# s_axi_araddr_out_c [9:0] $end
$var wire 1 o# s_axi_wr_en_c $end
$var wire 1 p# s_axi_rd_en_c $end
$var wire 1 q# s_aresetn_a_c $end
$var wire 8 r# s_axi_arlen_c [7:0] $end
$var wire 4 s# s_axi_rid_c [3:0] $end
$var wire 32 t# s_axi_rdata_c [31:0] $end
$var wire 2 u# s_axi_rresp_c [1:0] $end
$var wire 1 v# s_axi_rlast_c $end
$var wire 1 w# s_axi_rvalid_c $end
$var wire 1 x# s_axi_rready_c $end
$var wire 1 y# regceb_c $end
$var wire 7 z# s_axi_payload_c [6:0] $end
$var wire 7 {# m_axi_payload_c [6:0] $end
$var reg 5 |# RSTA_SHFT_REG [4:0] $end
$var reg 1 }# POR_A $end
$var reg 5 ~# RSTB_SHFT_REG [4:0] $end
$var reg 1 !$ POR_B $end
$var reg 1 "$ ENA_dly $end
$var reg 1 #$ ENA_dly_D $end
$var reg 1 $$ ENB_dly $end
$var reg 1 %$ ENB_dly_D $end
$var wire 1 &$ RSTA_I_SAFE $end
$var wire 1 '$ RSTB_I_SAFE $end
$var wire 1 ($ ENA_I_SAFE $end
$var wire 1 )$ ENB_I_SAFE $end
$var reg 1 *$ ram_rstram_a_busy $end
$var reg 1 +$ ram_rstreg_a_busy $end
$var reg 1 ,$ ram_rstram_b_busy $end
$var reg 1 -$ ram_rstreg_b_busy $end
$var reg 1 .$ ENA_dly_reg $end
$var reg 1 /$ ENB_dly_reg $end
$var reg 1 0$ ENA_dly_reg_D $end
$var reg 1 1$ ENB_dly_reg_D $end
$var parameter 144 2$ C_CORENAME [143:0] $end
$var parameter 56 3$ C_FAMILY [55:0] $end
$var parameter 56 4$ C_XDEVICEFAMILY [55:0] $end
$var parameter 16 5$ C_ELABORATION_DIR [15:0] $end
$var parameter 32 6$ C_INTERFACE_TYPE [31:0] $end
$var parameter 32 7$ C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 8$ C_CTRL_ECC_ALGO [31:0] $end
$var parameter 32 9$ C_ENABLE_32BIT_ADDRESS [31:0] $end
$var parameter 32 :$ C_AXI_TYPE [31:0] $end
$var parameter 32 ;$ C_AXI_SLAVE_TYPE [31:0] $end
$var parameter 32 <$ C_HAS_AXI_ID [31:0] $end
$var parameter 32 =$ C_AXI_ID_WIDTH [31:0] $end
$var parameter 32 >$ C_MEM_TYPE [31:0] $end
$var parameter 32 ?$ C_BYTE_SIZE [31:0] $end
$var parameter 32 @$ C_ALGORITHM [31:0] $end
$var parameter 32 A$ C_PRIM_TYPE [31:0] $end
$var parameter 32 B$ C_LOAD_INIT_FILE [31:0] $end
$var parameter 88 C$ C_INIT_FILE_NAME [87:0] $end
$var parameter 88 D$ C_INIT_FILE [87:0] $end
$var parameter 32 E$ C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 F$ C_DEFAULT_DATA [7:0] $end
$var parameter 32 G$ C_HAS_RSTA [31:0] $end
$var parameter 16 H$ C_RST_PRIORITY_A [15:0] $end
$var parameter 32 I$ C_RSTRAM_A [31:0] $end
$var parameter 8 J$ C_INITA_VAL [7:0] $end
$var parameter 32 K$ C_HAS_ENA [31:0] $end
$var parameter 32 L$ C_HAS_REGCEA [31:0] $end
$var parameter 32 M$ C_USE_BYTE_WEA [31:0] $end
$var parameter 32 N$ C_WEA_WIDTH [31:0] $end
$var parameter 88 O$ C_WRITE_MODE_A [87:0] $end
$var parameter 32 P$ C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 Q$ C_READ_WIDTH_A [31:0] $end
$var parameter 32 R$ C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 S$ C_READ_DEPTH_A [31:0] $end
$var parameter 32 T$ C_ADDRA_WIDTH [31:0] $end
$var parameter 32 U$ C_HAS_RSTB [31:0] $end
$var parameter 16 V$ C_RST_PRIORITY_B [15:0] $end
$var parameter 32 W$ C_RSTRAM_B [31:0] $end
$var parameter 8 X$ C_INITB_VAL [7:0] $end
$var parameter 32 Y$ C_HAS_ENB [31:0] $end
$var parameter 32 Z$ C_HAS_REGCEB [31:0] $end
$var parameter 32 [$ C_USE_BYTE_WEB [31:0] $end
$var parameter 32 \$ C_WEB_WIDTH [31:0] $end
$var parameter 88 ]$ C_WRITE_MODE_B [87:0] $end
$var parameter 32 ^$ C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 _$ C_READ_WIDTH_B [31:0] $end
$var parameter 32 `$ C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 a$ C_READ_DEPTH_B [31:0] $end
$var parameter 32 b$ C_ADDRB_WIDTH [31:0] $end
$var parameter 32 c$ C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 d$ C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 e$ C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 f$ C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 g$ C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 h$ C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 i$ C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 j$ C_USE_SOFTECC [31:0] $end
$var parameter 32 k$ C_READ_LATENCY_A [31:0] $end
$var parameter 32 l$ C_READ_LATENCY_B [31:0] $end
$var parameter 32 m$ C_USE_ECC [31:0] $end
$var parameter 32 n$ C_EN_ECC_PIPE [31:0] $end
$var parameter 32 o$ C_HAS_INJECTERR [31:0] $end
$var parameter 24 p$ C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 q$ C_COMMON_CLK [31:0] $end
$var parameter 32 r$ C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 s$ C_EN_SLEEP_PIN [31:0] $end
$var parameter 32 t$ C_USE_URAM [31:0] $end
$var parameter 32 u$ C_EN_RDADDRA_CHG [31:0] $end
$var parameter 32 v$ C_EN_RDADDRB_CHG [31:0] $end
$var parameter 32 w$ C_EN_DEEPSLEEP_PIN [31:0] $end
$var parameter 32 x$ C_EN_SHUTDOWN_PIN [31:0] $end
$var parameter 32 y$ C_EN_SAFETY_CKT [31:0] $end
$var parameter 8 z$ C_COUNT_36K_BRAM [7:0] $end
$var parameter 8 {$ C_COUNT_18K_BRAM [7:0] $end
$var parameter 328 |$ C_EST_POWER_SUMMARY [327:0] $end
$var parameter 32 }$ C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 ~$ FLOP_DELAY [31:0] $end
$var parameter 32 !% C_AXI_PAYLOAD [31:0] $end
$var parameter 32 "% AXI_FULL_MEMORY_SLAVE [31:0] $end
$var parameter 32 #% C_AXI_ADDR_WIDTH_MSB [31:0] $end
$var parameter 32 $% C_AXI_ADDR_WIDTH [31:0] $end
$var parameter 32 %% LOWER_BOUND_VAL [31:0] $end
$var parameter 32 &% C_AXI_ADDR_WIDTH_LSB [31:0] $end
$var parameter 32 '% C_AXI_OS_WR [31:0] $end
$scope module native_mem_module.blk_mem_gen_v8_4_4_inst $end
$var wire 1 Q# CLKA $end
$var wire 1 &$ RSTA $end
$var wire 1 ($ ENA $end
$var wire 1 (% REGCEA $end
$var wire 1 )% WEA [0:0] $end
$var wire 10 *% ADDRA [9:0] $end
$var wire 32 +% DINA [31:0] $end
$var wire 32 4# DOUTA [31:0] $end
$var wire 1 U# CLKB $end
$var wire 1 '$ RSTB $end
$var wire 1 )$ ENB $end
$var wire 1 X# REGCEB $end
$var wire 1 5# WEB [0:0] $end
$var wire 10 6# ADDRB [9:0] $end
$var wire 32 7# DINB [31:0] $end
$var wire 32 8# DOUTB [31:0] $end
$var wire 1 ,% INJECTSBITERR $end
$var wire 1 -% INJECTDBITERR $end
$var wire 1 M# ECCPIPECE $end
$var wire 1 N# SLEEP $end
$var wire 1 '# SBITERR $end
$var wire 1 (# DBITERR $end
$var wire 10 9# RDADDRECC [9:0] $end
$var reg 39 .% doublebit_error [38:0] $end
$var reg 32 /% memory_out_a [31:0] $end
$var reg 32 0% memory_out_b [31:0] $end
$var reg 1 1% sbiterr_in $end
$var wire 1 2% sbiterr_sdp $end
$var reg 1 3% dbiterr_in $end
$var wire 1 4% dbiterr_sdp $end
$var wire 32 5% dout_i [31:0] $end
$var wire 1 6% dbiterr_i $end
$var wire 1 7% sbiterr_i $end
$var wire 10 8% rdaddrecc_i [9:0] $end
$var reg 10 9% rdaddrecc_in [9:0] $end
$var wire 10 :% rdaddrecc_sdp [9:0] $end
$var reg 32 ;% inita_val [31:0] $end
$var reg 32 <% initb_val [31:0] $end
$var reg 1 =% is_collision $end
$var reg 1 >% is_collision_a $end
$var reg 1 ?% is_collision_delay_a $end
$var reg 1 @% is_collision_b $end
$var reg 1 A% is_collision_delay_b $end
$var integer 32 B% status $end
$var integer 32 C% initfile $end
$var integer 32 D% meminitfile $end
$var reg 32 E% mif_data [31:0] $end
$var reg 32 F% mem_data [31:0] $end
$var reg 256 G% inita_str [255:0] $end
$var reg 256 H% initb_str [255:0] $end
$var reg 256 I% default_data_str [255:0] $end
$var reg 8184 J% init_file_str [8183:0] $end
$var reg 8184 K% mem_init_file_str [8183:0] $end
$var integer 32 L% cnt $end
$var integer 32 M% write_addr_a_width $end
$var integer 32 N% read_addr_a_width $end
$var integer 32 O% write_addr_b_width $end
$var integer 32 P% read_addr_b_width $end
$var wire 1 Q% ena_i $end
$var wire 1 R% enb_i $end
$var wire 1 S% reseta_i $end
$var wire 1 T% resetb_i $end
$var wire 1 U% wea_i [0:0] $end
$var wire 1 V% web_i [0:0] $end
$var wire 1 W% rea_i $end
$var wire 1 X% reb_i $end
$var wire 1 Y% rsta_outp_stage $end
$var wire 1 Z% rstb_outp_stage $end
$var wire 10 [% \async_coll.addra_delay  [9:0] $end
$var wire 1 \% \async_coll.wea_delay  [0:0] $end
$var wire 1 ]% \async_coll.ena_delay  $end
$var wire 10 ^% \async_coll.addrb_delay  [9:0] $end
$var wire 1 _% \async_coll.web_delay  [0:0] $end
$var wire 1 `% \async_coll.enb_delay  $end
$var parameter 144 a% C_CORENAME [143:0] $end
$var parameter 56 b% C_FAMILY [55:0] $end
$var parameter 56 c% C_XDEVICEFAMILY [55:0] $end
$var parameter 32 d% C_MEM_TYPE [31:0] $end
$var parameter 32 e% C_BYTE_SIZE [31:0] $end
$var parameter 32 f% C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 g% C_ALGORITHM [31:0] $end
$var parameter 32 h% C_PRIM_TYPE [31:0] $end
$var parameter 32 i% C_LOAD_INIT_FILE [31:0] $end
$var parameter 88 j% C_INIT_FILE_NAME [87:0] $end
$var parameter 88 k% C_INIT_FILE [87:0] $end
$var parameter 32 l% C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 m% C_DEFAULT_DATA [7:0] $end
$var parameter 32 n% C_RST_TYPE [31:0] $end
$var parameter 32 o% C_HAS_RSTA [31:0] $end
$var parameter 16 p% C_RST_PRIORITY_A [15:0] $end
$var parameter 32 q% C_RSTRAM_A [31:0] $end
$var parameter 8 r% C_INITA_VAL [7:0] $end
$var parameter 32 s% C_HAS_ENA [31:0] $end
$var parameter 32 t% C_HAS_REGCEA [31:0] $end
$var parameter 32 u% C_USE_BYTE_WEA [31:0] $end
$var parameter 32 v% C_WEA_WIDTH [31:0] $end
$var parameter 88 w% C_WRITE_MODE_A [87:0] $end
$var parameter 32 x% C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 y% C_READ_WIDTH_A [31:0] $end
$var parameter 32 z% C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 {% C_READ_DEPTH_A [31:0] $end
$var parameter 32 |% C_ADDRA_WIDTH [31:0] $end
$var parameter 32 }% C_HAS_RSTB [31:0] $end
$var parameter 16 ~% C_RST_PRIORITY_B [15:0] $end
$var parameter 32 !& C_RSTRAM_B [31:0] $end
$var parameter 8 "& C_INITB_VAL [7:0] $end
$var parameter 32 #& C_HAS_ENB [31:0] $end
$var parameter 32 $& C_HAS_REGCEB [31:0] $end
$var parameter 32 %& C_USE_BYTE_WEB [31:0] $end
$var parameter 32 && C_WEB_WIDTH [31:0] $end
$var parameter 88 '& C_WRITE_MODE_B [87:0] $end
$var parameter 32 (& C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 )& C_READ_WIDTH_B [31:0] $end
$var parameter 32 *& C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 +& C_READ_DEPTH_B [31:0] $end
$var parameter 32 ,& C_ADDRB_WIDTH [31:0] $end
$var parameter 32 -& C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 .& C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 /& C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 0& C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 1& C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 2& C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 3& C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 4& C_USE_SOFTECC [31:0] $end
$var parameter 32 5& C_USE_ECC [31:0] $end
$var parameter 32 6& C_HAS_INJECTERR [31:0] $end
$var parameter 24 7& C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 8& C_COMMON_CLK [31:0] $end
$var parameter 32 9& FLOP_DELAY [31:0] $end
$var parameter 32 :& C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 ;& C_EN_ECC_PIPE [31:0] $end
$var parameter 32 <& C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 =& ADDRFILE [31:0] $end
$var parameter 32 >& COLLFILE [31:0] $end
$var parameter 32 ?& ERRFILE [31:0] $end
$var parameter 32 @& COLL_DELAY [31:0] $end
$var parameter 32 A& CHKBIT_WIDTH [31:0] $end
$var parameter 32 B& MIN_WIDTH_A [31:0] $end
$var parameter 32 C& MIN_WIDTH_B [31:0] $end
$var parameter 32 D& MIN_WIDTH [31:0] $end
$var parameter 32 E& MAX_DEPTH_A [31:0] $end
$var parameter 32 F& MAX_DEPTH_B [31:0] $end
$var parameter 32 G& MAX_DEPTH [31:0] $end
$var parameter 32 H& WRITE_WIDTH_RATIO_A [31:0] $end
$var parameter 32 I& READ_WIDTH_RATIO_A [31:0] $end
$var parameter 32 J& WRITE_WIDTH_RATIO_B [31:0] $end
$var parameter 32 K& READ_WIDTH_RATIO_B [31:0] $end
$var parameter 32 L& WRITE_ADDR_A_DIV [31:0] $end
$var parameter 32 M& READ_ADDR_A_DIV [31:0] $end
$var parameter 32 N& WRITE_ADDR_B_DIV [31:0] $end
$var parameter 32 O& READ_ADDR_B_DIV [31:0] $end
$var parameter 32 P& BYTE_SIZE [31:0] $end
$var parameter 56 Q& C_FAMILY_LOCALPARAM [55:0] $end
$var parameter 0 R& SINGLE_PORT $end
$var parameter 0 S& IS_ROM $end
$var parameter 0 T& HAS_A_WRITE $end
$var parameter 0 U& HAS_B_WRITE $end
$var parameter 0 V& HAS_A_READ $end
$var parameter 0 W& HAS_B_READ $end
$var parameter 0 X& HAS_B_PORT $end
$var parameter 32 Y& MUX_PIPELINE_STAGES_A [31:0] $end
$var parameter 32 Z& MUX_PIPELINE_STAGES_B [31:0] $end
$var parameter 32 [& NUM_OUTPUT_STAGES_A [31:0] $end
$var parameter 32 \& NUM_OUTPUT_STAGES_B [31:0] $end
$scope module reg_a $end
$var wire 1 Q# CLK $end
$var wire 1 Y% RST $end
$var wire 1 ($ EN $end
$var wire 1 (% REGCE $end
$var wire 32 ]& DIN_I [31:0] $end
$var reg 32 ^& DOUT [31:0] $end
$var wire 1 _& SBITERR_IN_I $end
$var wire 1 `& DBITERR_IN_I $end
$var reg 1 a& SBITERR $end
$var reg 1 b& DBITERR $end
$var wire 10 c& RDADDRECC_IN_I [9:0] $end
$var wire 1 d& ECCPIPECE $end
$var reg 10 e& RDADDRECC [9:0] $end
$var reg 32 f& out_regs [31:0] $end
$var reg 10 g& rdaddrecc_regs [9:0] $end
$var reg 1 h& sbiterr_regs [0:0] $end
$var reg 1 i& dbiterr_regs [0:0] $end
$var reg 256 j& init_str [255:0] $end
$var reg 32 k& init_val [31:0] $end
$var wire 1 l& en_i $end
$var wire 1 m& regce_i $end
$var wire 1 n& rst_i $end
$var reg 32 o& DIN [31:0] $end
$var reg 10 p& RDADDRECC_IN [9:0] $end
$var reg 1 q& SBITERR_IN $end
$var reg 1 r& DBITERR_IN $end
$var parameter 56 s& C_FAMILY [55:0] $end
$var parameter 56 t& C_XDEVICEFAMILY [55:0] $end
$var parameter 32 u& C_RST_TYPE [31:0] $end
$var parameter 32 v& C_HAS_RST [31:0] $end
$var parameter 32 w& C_RSTRAM [31:0] $end
$var parameter 16 x& C_RST_PRIORITY [15:0] $end
$var parameter 8 y& C_INIT_VAL [7:0] $end
$var parameter 32 z& C_HAS_EN [31:0] $end
$var parameter 32 {& C_HAS_REGCE [31:0] $end
$var parameter 32 |& C_DATA_WIDTH [31:0] $end
$var parameter 32 }& C_ADDRB_WIDTH [31:0] $end
$var parameter 32 ~& C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 !' C_USE_SOFTECC [31:0] $end
$var parameter 32 "' C_USE_ECC [31:0] $end
$var parameter 32 #' NUM_STAGES [31:0] $end
$var parameter 32 $' C_EN_ECC_PIPE [31:0] $end
$var parameter 32 %' FLOP_DELAY [31:0] $end
$var parameter 32 &' REG_STAGES [31:0] $end
$upscope $end
$scope module reg_b $end
$var wire 1 U# CLK $end
$var wire 1 Z% RST $end
$var wire 1 )$ EN $end
$var wire 1 X# REGCE $end
$var wire 32 '' DIN_I [31:0] $end
$var reg 32 (' DOUT [31:0] $end
$var wire 1 )' SBITERR_IN_I $end
$var wire 1 *' DBITERR_IN_I $end
$var reg 1 +' SBITERR $end
$var reg 1 ,' DBITERR $end
$var wire 10 -' RDADDRECC_IN_I [9:0] $end
$var wire 1 M# ECCPIPECE $end
$var reg 10 .' RDADDRECC [9:0] $end
$var reg 32 /' out_regs [31:0] $end
$var reg 10 0' rdaddrecc_regs [9:0] $end
$var reg 1 1' sbiterr_regs [0:0] $end
$var reg 1 2' dbiterr_regs [0:0] $end
$var reg 256 3' init_str [255:0] $end
$var reg 32 4' init_val [31:0] $end
$var wire 1 5' en_i $end
$var wire 1 6' regce_i $end
$var wire 1 7' rst_i $end
$var reg 32 8' DIN [31:0] $end
$var reg 10 9' RDADDRECC_IN [9:0] $end
$var reg 1 :' SBITERR_IN $end
$var reg 1 ;' DBITERR_IN $end
$var parameter 56 <' C_FAMILY [55:0] $end
$var parameter 56 =' C_XDEVICEFAMILY [55:0] $end
$var parameter 32 >' C_RST_TYPE [31:0] $end
$var parameter 32 ?' C_HAS_RST [31:0] $end
$var parameter 32 @' C_RSTRAM [31:0] $end
$var parameter 16 A' C_RST_PRIORITY [15:0] $end
$var parameter 8 B' C_INIT_VAL [7:0] $end
$var parameter 32 C' C_HAS_EN [31:0] $end
$var parameter 32 D' C_HAS_REGCE [31:0] $end
$var parameter 32 E' C_DATA_WIDTH [31:0] $end
$var parameter 32 F' C_ADDRB_WIDTH [31:0] $end
$var parameter 32 G' C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 H' C_USE_SOFTECC [31:0] $end
$var parameter 32 I' C_USE_ECC [31:0] $end
$var parameter 32 J' NUM_STAGES [31:0] $end
$var parameter 32 K' C_EN_ECC_PIPE [31:0] $end
$var parameter 32 L' FLOP_DELAY [31:0] $end
$var parameter 32 M' REG_STAGES [31:0] $end
$upscope $end
$scope module has_softecc_output_reg_stage $end
$var wire 1 U# CLK $end
$var wire 32 5% DIN [31:0] $end
$var reg 32 N' DOUT [31:0] $end
$var wire 1 7% SBITERR_IN $end
$var wire 1 6% DBITERR_IN $end
$var reg 1 O' SBITERR $end
$var reg 1 P' DBITERR $end
$var wire 10 8% RDADDRECC_IN [9:0] $end
$var reg 10 Q' RDADDRECC [9:0] $end
$var reg 32 R' dout_i [31:0] $end
$var reg 1 S' sbiterr_i $end
$var reg 1 T' dbiterr_i $end
$var reg 10 U' rdaddrecc_i [9:0] $end
$var parameter 32 V' C_DATA_WIDTH [31:0] $end
$var parameter 32 W' C_ADDRB_WIDTH [31:0] $end
$var parameter 32 X' C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 Y' C_USE_SOFTECC [31:0] $end
$var parameter 32 Z' FLOP_DELAY [31:0] $end
$upscope $end
$scope task write_a $end
$var reg 10 [' addr [9:0] $end
$var reg 1 \' byte_en [0:0] $end
$var reg 32 ]' data [31:0] $end
$var reg 1 ^' inj_sbiterr $end
$var reg 1 _' inj_dbiterr $end
$var reg 32 `' current_contents [31:0] $end
$var reg 10 a' address [9:0] $end
$var integer 32 b' i $end
$upscope $end
$scope task write_b $end
$var reg 10 c' addr [9:0] $end
$var reg 1 d' byte_en [0:0] $end
$var reg 32 e' data [31:0] $end
$var reg 32 f' current_contents [31:0] $end
$var reg 10 g' address [9:0] $end
$var integer 32 h' i $end
$upscope $end
$scope task read_a $end
$var reg 10 i' addr [9:0] $end
$var reg 1 j' reset $end
$var reg 10 k' address [9:0] $end
$var integer 32 l' i $end
$upscope $end
$scope task read_b $end
$var reg 10 m' addr [9:0] $end
$var reg 1 n' reset $end
$var reg 10 o' address [9:0] $end
$var integer 32 p' i $end
$upscope $end
$scope task init_memory $end
$var integer 32 q' i $end
$var integer 32 r' j $end
$var integer 32 s' addr_step $end
$var integer 32 t' status $end
$var reg 32 u' default_data [31:0] $end
$upscope $end
$scope function log2roundup $end
$var integer 32 v' log2roundup $end
$var integer 32 w' data_value $end
$var integer 32 x' width $end
$var integer 32 y' cnt $end
$upscope $end
$scope function collision_check $end
$var integer 32 z' collision_check $end
$var reg 10 {' addr_a [9:0] $end
$var integer 32 |' iswrite_a $end
$var reg 10 }' addr_b [9:0] $end
$var integer 32 ~' iswrite_b $end
$var reg 1 !( c_aw_bw $end
$var reg 1 "( c_aw_br $end
$var reg 1 #( c_ar_bw $end
$var integer 32 $( scaled_addra_to_waddrb_width $end
$var integer 32 %( scaled_addrb_to_waddrb_width $end
$var integer 32 &( scaled_addra_to_waddra_width $end
$var integer 32 '( scaled_addrb_to_waddra_width $end
$var integer 32 (( scaled_addra_to_raddrb_width $end
$var integer 32 )( scaled_addrb_to_raddrb_width $end
$var integer 32 *( scaled_addra_to_raddra_width $end
$var integer 32 +( scaled_addrb_to_raddra_width $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module data_ram $end
$var wire 1 & clka $end
$var wire 1 ,( ena $end
$var wire 1 / wea [0:0] $end
$var wire 10 . addra [9:0] $end
$var wire 32 - dina [31:0] $end
$var wire 32 , douta [31:0] $end
$scope module inst $end
$var wire 1 & clka $end
$var wire 1 -( rsta $end
$var wire 1 ,( ena $end
$var wire 1 .( regcea $end
$var wire 1 / wea [0:0] $end
$var wire 10 . addra [9:0] $end
$var wire 32 - dina [31:0] $end
$var wire 32 , douta [31:0] $end
$var wire 1 /( clkb $end
$var wire 1 0( rstb $end
$var wire 1 1( enb $end
$var wire 1 2( regceb $end
$var wire 1 3( web [0:0] $end
$var wire 10 4( addrb [9:0] $end
$var wire 32 5( dinb [31:0] $end
$var wire 32 6( doutb [31:0] $end
$var wire 1 7( injectsbiterr $end
$var wire 1 8( injectdbiterr $end
$var wire 1 9( sbiterr $end
$var wire 1 :( dbiterr $end
$var wire 10 ;( rdaddrecc [9:0] $end
$var wire 1 <( eccpipece $end
$var wire 1 =( sleep $end
$var wire 1 >( deepsleep $end
$var wire 1 ?( shutdown $end
$var wire 1 @( rsta_busy $end
$var wire 1 A( rstb_busy $end
$var wire 1 B( s_aclk $end
$var wire 1 C( s_aresetn $end
$var wire 4 D( s_axi_awid [3:0] $end
$var wire 32 E( s_axi_awaddr [31:0] $end
$var wire 8 F( s_axi_awlen [7:0] $end
$var wire 3 G( s_axi_awsize [2:0] $end
$var wire 2 H( s_axi_awburst [1:0] $end
$var wire 1 I( s_axi_awvalid $end
$var wire 1 J( s_axi_awready $end
$var wire 32 K( s_axi_wdata [31:0] $end
$var wire 1 L( s_axi_wstrb [0:0] $end
$var wire 1 M( s_axi_wlast $end
$var wire 1 N( s_axi_wvalid $end
$var wire 1 O( s_axi_wready $end
$var wire 4 P( s_axi_bid [3:0] $end
$var wire 2 Q( s_axi_bresp [1:0] $end
$var wire 1 R( s_axi_bvalid $end
$var wire 1 S( s_axi_bready $end
$var wire 4 T( s_axi_arid [3:0] $end
$var wire 32 U( s_axi_araddr [31:0] $end
$var wire 8 V( s_axi_arlen [7:0] $end
$var wire 3 W( s_axi_arsize [2:0] $end
$var wire 2 X( s_axi_arburst [1:0] $end
$var wire 1 Y( s_axi_arvalid $end
$var wire 1 Z( s_axi_arready $end
$var wire 4 [( s_axi_rid [3:0] $end
$var wire 32 \( s_axi_rdata [31:0] $end
$var wire 2 ]( s_axi_rresp [1:0] $end
$var wire 1 ^( s_axi_rlast $end
$var wire 1 _( s_axi_rvalid $end
$var wire 1 `( s_axi_rready $end
$var wire 1 a( s_axi_injectsbiterr $end
$var wire 1 b( s_axi_injectdbiterr $end
$var wire 1 c( s_axi_sbiterr $end
$var wire 1 d( s_axi_dbiterr $end
$var wire 10 e( s_axi_rdaddrecc [9:0] $end
$var wire 1 f( SBITERR $end
$var wire 1 g( DBITERR $end
$var wire 1 h( S_AXI_AWREADY $end
$var wire 1 i( S_AXI_WREADY $end
$var wire 1 j( S_AXI_BVALID $end
$var wire 1 k( S_AXI_ARREADY $end
$var wire 1 l( S_AXI_RLAST $end
$var wire 1 m( S_AXI_RVALID $end
$var wire 1 n( S_AXI_SBITERR $end
$var wire 1 o( S_AXI_DBITERR $end
$var wire 1 p( WEA [0:0] $end
$var wire 10 q( ADDRA [9:0] $end
$var wire 32 r( DINA [31:0] $end
$var wire 32 s( DOUTA [31:0] $end
$var wire 1 t( WEB [0:0] $end
$var wire 10 u( ADDRB [9:0] $end
$var wire 32 v( DINB [31:0] $end
$var wire 32 w( DOUTB [31:0] $end
$var wire 10 x( RDADDRECC [9:0] $end
$var wire 4 y( S_AXI_AWID [3:0] $end
$var wire 32 z( S_AXI_AWADDR [31:0] $end
$var wire 8 {( S_AXI_AWLEN [7:0] $end
$var wire 3 |( S_AXI_AWSIZE [2:0] $end
$var wire 2 }( S_AXI_AWBURST [1:0] $end
$var wire 32 ~( S_AXI_WDATA [31:0] $end
$var wire 1 !) S_AXI_WSTRB [0:0] $end
$var wire 4 ") S_AXI_BID [3:0] $end
$var wire 2 #) S_AXI_BRESP [1:0] $end
$var wire 4 $) S_AXI_ARID [3:0] $end
$var wire 32 %) S_AXI_ARADDR [31:0] $end
$var wire 8 &) S_AXI_ARLEN [7:0] $end
$var wire 3 ') S_AXI_ARSIZE [2:0] $end
$var wire 2 () S_AXI_ARBURST [1:0] $end
$var wire 4 )) S_AXI_RID [3:0] $end
$var wire 32 *) S_AXI_RDATA [31:0] $end
$var wire 2 +) S_AXI_RRESP [1:0] $end
$var wire 10 ,) S_AXI_RDADDRECC [9:0] $end
$var wire 1 -) WEB_parameterized [0:0] $end
$var wire 1 .) ECCPIPECE $end
$var wire 1 /) SLEEP $end
$var reg 1 0) RSTA_BUSY $end
$var reg 1 1) RSTB_BUSY $end
$var wire 1 2) CLKA $end
$var wire 1 3) RSTA $end
$var wire 1 4) ENA $end
$var wire 1 5) REGCEA $end
$var wire 1 6) CLKB $end
$var wire 1 7) RSTB $end
$var wire 1 8) ENB $end
$var wire 1 9) REGCEB $end
$var wire 1 :) INJECTSBITERR $end
$var wire 1 ;) INJECTDBITERR $end
$var wire 1 <) S_ACLK $end
$var wire 1 =) S_ARESETN $end
$var wire 1 >) S_AXI_AWVALID $end
$var wire 1 ?) S_AXI_WLAST $end
$var wire 1 @) S_AXI_WVALID $end
$var wire 1 A) S_AXI_BREADY $end
$var wire 1 B) S_AXI_ARVALID $end
$var wire 1 C) S_AXI_RREADY $end
$var wire 1 D) S_AXI_INJECTSBITERR $end
$var wire 1 E) S_AXI_INJECTDBITERR $end
$var reg 1 F) injectsbiterr_in $end
$var reg 1 G) injectdbiterr_in $end
$var reg 1 H) rsta_in $end
$var reg 1 I) ena_in $end
$var reg 1 J) regcea_in $end
$var reg 1 K) wea_in [0:0] $end
$var reg 10 L) addra_in [9:0] $end
$var reg 32 M) dina_in [31:0] $end
$var wire 10 N) s_axi_awaddr_out_c [9:0] $end
$var wire 10 O) s_axi_araddr_out_c [9:0] $end
$var wire 1 P) s_axi_wr_en_c $end
$var wire 1 Q) s_axi_rd_en_c $end
$var wire 1 R) s_aresetn_a_c $end
$var wire 8 S) s_axi_arlen_c [7:0] $end
$var wire 4 T) s_axi_rid_c [3:0] $end
$var wire 32 U) s_axi_rdata_c [31:0] $end
$var wire 2 V) s_axi_rresp_c [1:0] $end
$var wire 1 W) s_axi_rlast_c $end
$var wire 1 X) s_axi_rvalid_c $end
$var wire 1 Y) s_axi_rready_c $end
$var wire 1 Z) regceb_c $end
$var wire 7 [) s_axi_payload_c [6:0] $end
$var wire 7 \) m_axi_payload_c [6:0] $end
$var reg 5 ]) RSTA_SHFT_REG [4:0] $end
$var reg 1 ^) POR_A $end
$var reg 5 _) RSTB_SHFT_REG [4:0] $end
$var reg 1 `) POR_B $end
$var reg 1 a) ENA_dly $end
$var reg 1 b) ENA_dly_D $end
$var reg 1 c) ENB_dly $end
$var reg 1 d) ENB_dly_D $end
$var wire 1 e) RSTA_I_SAFE $end
$var wire 1 f) RSTB_I_SAFE $end
$var wire 1 g) ENA_I_SAFE $end
$var wire 1 h) ENB_I_SAFE $end
$var reg 1 i) ram_rstram_a_busy $end
$var reg 1 j) ram_rstreg_a_busy $end
$var reg 1 k) ram_rstram_b_busy $end
$var reg 1 l) ram_rstreg_b_busy $end
$var reg 1 m) ENA_dly_reg $end
$var reg 1 n) ENB_dly_reg $end
$var reg 1 o) ENA_dly_reg_D $end
$var reg 1 p) ENB_dly_reg_D $end
$var parameter 144 q) C_CORENAME [143:0] $end
$var parameter 56 r) C_FAMILY [55:0] $end
$var parameter 56 s) C_XDEVICEFAMILY [55:0] $end
$var parameter 16 t) C_ELABORATION_DIR [15:0] $end
$var parameter 32 u) C_INTERFACE_TYPE [31:0] $end
$var parameter 32 v) C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 w) C_CTRL_ECC_ALGO [31:0] $end
$var parameter 32 x) C_ENABLE_32BIT_ADDRESS [31:0] $end
$var parameter 32 y) C_AXI_TYPE [31:0] $end
$var parameter 32 z) C_AXI_SLAVE_TYPE [31:0] $end
$var parameter 32 {) C_HAS_AXI_ID [31:0] $end
$var parameter 32 |) C_AXI_ID_WIDTH [31:0] $end
$var parameter 32 }) C_MEM_TYPE [31:0] $end
$var parameter 32 ~) C_BYTE_SIZE [31:0] $end
$var parameter 32 !* C_ALGORITHM [31:0] $end
$var parameter 32 "* C_PRIM_TYPE [31:0] $end
$var parameter 32 #* C_LOAD_INIT_FILE [31:0] $end
$var parameter 144 $* C_INIT_FILE_NAME [143:0] $end
$var parameter 88 %* C_INIT_FILE [87:0] $end
$var parameter 32 &* C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 '* C_DEFAULT_DATA [7:0] $end
$var parameter 32 (* C_HAS_RSTA [31:0] $end
$var parameter 16 )* C_RST_PRIORITY_A [15:0] $end
$var parameter 32 ** C_RSTRAM_A [31:0] $end
$var parameter 8 +* C_INITA_VAL [7:0] $end
$var parameter 32 ,* C_HAS_ENA [31:0] $end
$var parameter 32 -* C_HAS_REGCEA [31:0] $end
$var parameter 32 .* C_USE_BYTE_WEA [31:0] $end
$var parameter 32 /* C_WEA_WIDTH [31:0] $end
$var parameter 72 0* C_WRITE_MODE_A [71:0] $end
$var parameter 32 1* C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 2* C_READ_WIDTH_A [31:0] $end
$var parameter 32 3* C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 4* C_READ_DEPTH_A [31:0] $end
$var parameter 32 5* C_ADDRA_WIDTH [31:0] $end
$var parameter 32 6* C_HAS_RSTB [31:0] $end
$var parameter 16 7* C_RST_PRIORITY_B [15:0] $end
$var parameter 32 8* C_RSTRAM_B [31:0] $end
$var parameter 8 9* C_INITB_VAL [7:0] $end
$var parameter 32 :* C_HAS_ENB [31:0] $end
$var parameter 32 ;* C_HAS_REGCEB [31:0] $end
$var parameter 32 <* C_USE_BYTE_WEB [31:0] $end
$var parameter 32 =* C_WEB_WIDTH [31:0] $end
$var parameter 88 >* C_WRITE_MODE_B [87:0] $end
$var parameter 32 ?* C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 @* C_READ_WIDTH_B [31:0] $end
$var parameter 32 A* C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 B* C_READ_DEPTH_B [31:0] $end
$var parameter 32 C* C_ADDRB_WIDTH [31:0] $end
$var parameter 32 D* C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 E* C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 F* C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 G* C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 H* C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 I* C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 J* C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 K* C_USE_SOFTECC [31:0] $end
$var parameter 32 L* C_READ_LATENCY_A [31:0] $end
$var parameter 32 M* C_READ_LATENCY_B [31:0] $end
$var parameter 32 N* C_USE_ECC [31:0] $end
$var parameter 32 O* C_EN_ECC_PIPE [31:0] $end
$var parameter 32 P* C_HAS_INJECTERR [31:0] $end
$var parameter 24 Q* C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 R* C_COMMON_CLK [31:0] $end
$var parameter 32 S* C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 T* C_EN_SLEEP_PIN [31:0] $end
$var parameter 32 U* C_USE_URAM [31:0] $end
$var parameter 32 V* C_EN_RDADDRA_CHG [31:0] $end
$var parameter 32 W* C_EN_RDADDRB_CHG [31:0] $end
$var parameter 32 X* C_EN_DEEPSLEEP_PIN [31:0] $end
$var parameter 32 Y* C_EN_SHUTDOWN_PIN [31:0] $end
$var parameter 32 Z* C_EN_SAFETY_CKT [31:0] $end
$var parameter 8 [* C_COUNT_36K_BRAM [7:0] $end
$var parameter 8 \* C_COUNT_18K_BRAM [7:0] $end
$var parameter 352 ]* C_EST_POWER_SUMMARY [351:0] $end
$var parameter 32 ^* C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 _* FLOP_DELAY [31:0] $end
$var parameter 32 `* C_AXI_PAYLOAD [31:0] $end
$var parameter 32 a* AXI_FULL_MEMORY_SLAVE [31:0] $end
$var parameter 32 b* C_AXI_ADDR_WIDTH_MSB [31:0] $end
$var parameter 32 c* C_AXI_ADDR_WIDTH [31:0] $end
$var parameter 32 d* LOWER_BOUND_VAL [31:0] $end
$var parameter 32 e* C_AXI_ADDR_WIDTH_LSB [31:0] $end
$var parameter 32 f* C_AXI_OS_WR [31:0] $end
$scope module native_mem_module.blk_mem_gen_v8_4_4_inst $end
$var wire 1 2) CLKA $end
$var wire 1 e) RSTA $end
$var wire 1 g) ENA $end
$var wire 1 g* REGCEA $end
$var wire 1 h* WEA [0:0] $end
$var wire 10 i* ADDRA [9:0] $end
$var wire 32 j* DINA [31:0] $end
$var wire 32 s( DOUTA [31:0] $end
$var wire 1 6) CLKB $end
$var wire 1 f) RSTB $end
$var wire 1 h) ENB $end
$var wire 1 9) REGCEB $end
$var wire 1 t( WEB [0:0] $end
$var wire 10 u( ADDRB [9:0] $end
$var wire 32 v( DINB [31:0] $end
$var wire 32 w( DOUTB [31:0] $end
$var wire 1 k* INJECTSBITERR $end
$var wire 1 l* INJECTDBITERR $end
$var wire 1 .) ECCPIPECE $end
$var wire 1 /) SLEEP $end
$var wire 1 f( SBITERR $end
$var wire 1 g( DBITERR $end
$var wire 10 x( RDADDRECC [9:0] $end
$var reg 39 m* doublebit_error [38:0] $end
$var reg 32 n* memory_out_a [31:0] $end
$var reg 32 o* memory_out_b [31:0] $end
$var reg 1 p* sbiterr_in $end
$var wire 1 q* sbiterr_sdp $end
$var reg 1 r* dbiterr_in $end
$var wire 1 s* dbiterr_sdp $end
$var wire 32 t* dout_i [31:0] $end
$var wire 1 u* dbiterr_i $end
$var wire 1 v* sbiterr_i $end
$var wire 10 w* rdaddrecc_i [9:0] $end
$var reg 10 x* rdaddrecc_in [9:0] $end
$var wire 10 y* rdaddrecc_sdp [9:0] $end
$var reg 32 z* inita_val [31:0] $end
$var reg 32 {* initb_val [31:0] $end
$var reg 1 |* is_collision $end
$var reg 1 }* is_collision_a $end
$var reg 1 ~* is_collision_delay_a $end
$var reg 1 !+ is_collision_b $end
$var reg 1 "+ is_collision_delay_b $end
$var integer 32 #+ status $end
$var integer 32 $+ initfile $end
$var integer 32 %+ meminitfile $end
$var reg 32 &+ mif_data [31:0] $end
$var reg 32 '+ mem_data [31:0] $end
$var reg 256 (+ inita_str [255:0] $end
$var reg 256 )+ initb_str [255:0] $end
$var reg 256 *+ default_data_str [255:0] $end
$var reg 8184 ++ init_file_str [8183:0] $end
$var reg 8184 ,+ mem_init_file_str [8183:0] $end
$var integer 32 -+ cnt $end
$var integer 32 .+ write_addr_a_width $end
$var integer 32 /+ read_addr_a_width $end
$var integer 32 0+ write_addr_b_width $end
$var integer 32 1+ read_addr_b_width $end
$var wire 1 2+ ena_i $end
$var wire 1 3+ enb_i $end
$var wire 1 4+ reseta_i $end
$var wire 1 5+ resetb_i $end
$var wire 1 6+ wea_i [0:0] $end
$var wire 1 7+ web_i [0:0] $end
$var wire 1 8+ rea_i $end
$var wire 1 9+ reb_i $end
$var wire 1 :+ rsta_outp_stage $end
$var wire 1 ;+ rstb_outp_stage $end
$var wire 10 <+ \async_coll.addra_delay  [9:0] $end
$var wire 1 =+ \async_coll.wea_delay  [0:0] $end
$var wire 1 >+ \async_coll.ena_delay  $end
$var wire 10 ?+ \async_coll.addrb_delay  [9:0] $end
$var wire 1 @+ \async_coll.web_delay  [0:0] $end
$var wire 1 A+ \async_coll.enb_delay  $end
$var parameter 144 B+ C_CORENAME [143:0] $end
$var parameter 56 C+ C_FAMILY [55:0] $end
$var parameter 56 D+ C_XDEVICEFAMILY [55:0] $end
$var parameter 32 E+ C_MEM_TYPE [31:0] $end
$var parameter 32 F+ C_BYTE_SIZE [31:0] $end
$var parameter 32 G+ C_USE_BRAM_BLOCK [31:0] $end
$var parameter 32 H+ C_ALGORITHM [31:0] $end
$var parameter 32 I+ C_PRIM_TYPE [31:0] $end
$var parameter 32 J+ C_LOAD_INIT_FILE [31:0] $end
$var parameter 144 K+ C_INIT_FILE_NAME [143:0] $end
$var parameter 88 L+ C_INIT_FILE [87:0] $end
$var parameter 32 M+ C_USE_DEFAULT_DATA [31:0] $end
$var parameter 8 N+ C_DEFAULT_DATA [7:0] $end
$var parameter 32 O+ C_RST_TYPE [31:0] $end
$var parameter 32 P+ C_HAS_RSTA [31:0] $end
$var parameter 16 Q+ C_RST_PRIORITY_A [15:0] $end
$var parameter 32 R+ C_RSTRAM_A [31:0] $end
$var parameter 8 S+ C_INITA_VAL [7:0] $end
$var parameter 32 T+ C_HAS_ENA [31:0] $end
$var parameter 32 U+ C_HAS_REGCEA [31:0] $end
$var parameter 32 V+ C_USE_BYTE_WEA [31:0] $end
$var parameter 32 W+ C_WEA_WIDTH [31:0] $end
$var parameter 72 X+ C_WRITE_MODE_A [71:0] $end
$var parameter 32 Y+ C_WRITE_WIDTH_A [31:0] $end
$var parameter 32 Z+ C_READ_WIDTH_A [31:0] $end
$var parameter 32 [+ C_WRITE_DEPTH_A [31:0] $end
$var parameter 32 \+ C_READ_DEPTH_A [31:0] $end
$var parameter 32 ]+ C_ADDRA_WIDTH [31:0] $end
$var parameter 32 ^+ C_HAS_RSTB [31:0] $end
$var parameter 16 _+ C_RST_PRIORITY_B [15:0] $end
$var parameter 32 `+ C_RSTRAM_B [31:0] $end
$var parameter 8 a+ C_INITB_VAL [7:0] $end
$var parameter 32 b+ C_HAS_ENB [31:0] $end
$var parameter 32 c+ C_HAS_REGCEB [31:0] $end
$var parameter 32 d+ C_USE_BYTE_WEB [31:0] $end
$var parameter 32 e+ C_WEB_WIDTH [31:0] $end
$var parameter 88 f+ C_WRITE_MODE_B [87:0] $end
$var parameter 32 g+ C_WRITE_WIDTH_B [31:0] $end
$var parameter 32 h+ C_READ_WIDTH_B [31:0] $end
$var parameter 32 i+ C_WRITE_DEPTH_B [31:0] $end
$var parameter 32 j+ C_READ_DEPTH_B [31:0] $end
$var parameter 32 k+ C_ADDRB_WIDTH [31:0] $end
$var parameter 32 l+ C_HAS_MEM_OUTPUT_REGS_A [31:0] $end
$var parameter 32 m+ C_HAS_MEM_OUTPUT_REGS_B [31:0] $end
$var parameter 32 n+ C_HAS_MUX_OUTPUT_REGS_A [31:0] $end
$var parameter 32 o+ C_HAS_MUX_OUTPUT_REGS_B [31:0] $end
$var parameter 32 p+ C_HAS_SOFTECC_INPUT_REGS_A [31:0] $end
$var parameter 32 q+ C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 r+ C_MUX_PIPELINE_STAGES [31:0] $end
$var parameter 32 s+ C_USE_SOFTECC [31:0] $end
$var parameter 32 t+ C_USE_ECC [31:0] $end
$var parameter 32 u+ C_HAS_INJECTERR [31:0] $end
$var parameter 24 v+ C_SIM_COLLISION_CHECK [23:0] $end
$var parameter 32 w+ C_COMMON_CLK [31:0] $end
$var parameter 32 x+ FLOP_DELAY [31:0] $end
$var parameter 32 y+ C_DISABLE_WARN_BHV_COLL [31:0] $end
$var parameter 32 z+ C_EN_ECC_PIPE [31:0] $end
$var parameter 32 {+ C_DISABLE_WARN_BHV_RANGE [31:0] $end
$var parameter 32 |+ ADDRFILE [31:0] $end
$var parameter 32 }+ COLLFILE [31:0] $end
$var parameter 32 ~+ ERRFILE [31:0] $end
$var parameter 32 !, COLL_DELAY [31:0] $end
$var parameter 32 ", CHKBIT_WIDTH [31:0] $end
$var parameter 32 #, MIN_WIDTH_A [31:0] $end
$var parameter 32 $, MIN_WIDTH_B [31:0] $end
$var parameter 32 %, MIN_WIDTH [31:0] $end
$var parameter 32 &, MAX_DEPTH_A [31:0] $end
$var parameter 32 ', MAX_DEPTH_B [31:0] $end
$var parameter 32 (, MAX_DEPTH [31:0] $end
$var parameter 32 ), WRITE_WIDTH_RATIO_A [31:0] $end
$var parameter 32 *, READ_WIDTH_RATIO_A [31:0] $end
$var parameter 32 +, WRITE_WIDTH_RATIO_B [31:0] $end
$var parameter 32 ,, READ_WIDTH_RATIO_B [31:0] $end
$var parameter 32 -, WRITE_ADDR_A_DIV [31:0] $end
$var parameter 32 ., READ_ADDR_A_DIV [31:0] $end
$var parameter 32 /, WRITE_ADDR_B_DIV [31:0] $end
$var parameter 32 0, READ_ADDR_B_DIV [31:0] $end
$var parameter 32 1, BYTE_SIZE [31:0] $end
$var parameter 56 2, C_FAMILY_LOCALPARAM [55:0] $end
$var parameter 0 3, SINGLE_PORT $end
$var parameter 0 4, IS_ROM $end
$var parameter 0 5, HAS_A_WRITE $end
$var parameter 0 6, HAS_B_WRITE $end
$var parameter 0 7, HAS_A_READ $end
$var parameter 0 8, HAS_B_READ $end
$var parameter 0 9, HAS_B_PORT $end
$var parameter 32 :, MUX_PIPELINE_STAGES_A [31:0] $end
$var parameter 32 ;, MUX_PIPELINE_STAGES_B [31:0] $end
$var parameter 32 <, NUM_OUTPUT_STAGES_A [31:0] $end
$var parameter 32 =, NUM_OUTPUT_STAGES_B [31:0] $end
$scope module reg_a $end
$var wire 1 2) CLK $end
$var wire 1 :+ RST $end
$var wire 1 g) EN $end
$var wire 1 g* REGCE $end
$var wire 32 >, DIN_I [31:0] $end
$var reg 32 ?, DOUT [31:0] $end
$var wire 1 @, SBITERR_IN_I $end
$var wire 1 A, DBITERR_IN_I $end
$var reg 1 B, SBITERR $end
$var reg 1 C, DBITERR $end
$var wire 10 D, RDADDRECC_IN_I [9:0] $end
$var wire 1 E, ECCPIPECE $end
$var reg 10 F, RDADDRECC [9:0] $end
$var reg 32 G, out_regs [31:0] $end
$var reg 10 H, rdaddrecc_regs [9:0] $end
$var reg 1 I, sbiterr_regs [0:0] $end
$var reg 1 J, dbiterr_regs [0:0] $end
$var reg 256 K, init_str [255:0] $end
$var reg 32 L, init_val [31:0] $end
$var wire 1 M, en_i $end
$var wire 1 N, regce_i $end
$var wire 1 O, rst_i $end
$var reg 32 P, DIN [31:0] $end
$var reg 10 Q, RDADDRECC_IN [9:0] $end
$var reg 1 R, SBITERR_IN $end
$var reg 1 S, DBITERR_IN $end
$var parameter 56 T, C_FAMILY [55:0] $end
$var parameter 56 U, C_XDEVICEFAMILY [55:0] $end
$var parameter 32 V, C_RST_TYPE [31:0] $end
$var parameter 32 W, C_HAS_RST [31:0] $end
$var parameter 32 X, C_RSTRAM [31:0] $end
$var parameter 16 Y, C_RST_PRIORITY [15:0] $end
$var parameter 8 Z, C_INIT_VAL [7:0] $end
$var parameter 32 [, C_HAS_EN [31:0] $end
$var parameter 32 \, C_HAS_REGCE [31:0] $end
$var parameter 32 ], C_DATA_WIDTH [31:0] $end
$var parameter 32 ^, C_ADDRB_WIDTH [31:0] $end
$var parameter 32 _, C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 `, C_USE_SOFTECC [31:0] $end
$var parameter 32 a, C_USE_ECC [31:0] $end
$var parameter 32 b, NUM_STAGES [31:0] $end
$var parameter 32 c, C_EN_ECC_PIPE [31:0] $end
$var parameter 32 d, FLOP_DELAY [31:0] $end
$var parameter 32 e, REG_STAGES [31:0] $end
$upscope $end
$scope module reg_b $end
$var wire 1 6) CLK $end
$var wire 1 ;+ RST $end
$var wire 1 h) EN $end
$var wire 1 9) REGCE $end
$var wire 32 f, DIN_I [31:0] $end
$var reg 32 g, DOUT [31:0] $end
$var wire 1 h, SBITERR_IN_I $end
$var wire 1 i, DBITERR_IN_I $end
$var reg 1 j, SBITERR $end
$var reg 1 k, DBITERR $end
$var wire 10 l, RDADDRECC_IN_I [9:0] $end
$var wire 1 .) ECCPIPECE $end
$var reg 10 m, RDADDRECC [9:0] $end
$var reg 32 n, out_regs [31:0] $end
$var reg 10 o, rdaddrecc_regs [9:0] $end
$var reg 1 p, sbiterr_regs [0:0] $end
$var reg 1 q, dbiterr_regs [0:0] $end
$var reg 256 r, init_str [255:0] $end
$var reg 32 s, init_val [31:0] $end
$var wire 1 t, en_i $end
$var wire 1 u, regce_i $end
$var wire 1 v, rst_i $end
$var reg 32 w, DIN [31:0] $end
$var reg 10 x, RDADDRECC_IN [9:0] $end
$var reg 1 y, SBITERR_IN $end
$var reg 1 z, DBITERR_IN $end
$var parameter 56 {, C_FAMILY [55:0] $end
$var parameter 56 |, C_XDEVICEFAMILY [55:0] $end
$var parameter 32 }, C_RST_TYPE [31:0] $end
$var parameter 32 ~, C_HAS_RST [31:0] $end
$var parameter 32 !- C_RSTRAM [31:0] $end
$var parameter 16 "- C_RST_PRIORITY [15:0] $end
$var parameter 8 #- C_INIT_VAL [7:0] $end
$var parameter 32 $- C_HAS_EN [31:0] $end
$var parameter 32 %- C_HAS_REGCE [31:0] $end
$var parameter 32 &- C_DATA_WIDTH [31:0] $end
$var parameter 32 '- C_ADDRB_WIDTH [31:0] $end
$var parameter 32 (- C_HAS_MEM_OUTPUT_REGS [31:0] $end
$var parameter 32 )- C_USE_SOFTECC [31:0] $end
$var parameter 32 *- C_USE_ECC [31:0] $end
$var parameter 32 +- NUM_STAGES [31:0] $end
$var parameter 32 ,- C_EN_ECC_PIPE [31:0] $end
$var parameter 32 -- FLOP_DELAY [31:0] $end
$var parameter 32 .- REG_STAGES [31:0] $end
$upscope $end
$scope module has_softecc_output_reg_stage $end
$var wire 1 6) CLK $end
$var wire 32 t* DIN [31:0] $end
$var reg 32 /- DOUT [31:0] $end
$var wire 1 v* SBITERR_IN $end
$var wire 1 u* DBITERR_IN $end
$var reg 1 0- SBITERR $end
$var reg 1 1- DBITERR $end
$var wire 10 w* RDADDRECC_IN [9:0] $end
$var reg 10 2- RDADDRECC [9:0] $end
$var reg 32 3- dout_i [31:0] $end
$var reg 1 4- sbiterr_i $end
$var reg 1 5- dbiterr_i $end
$var reg 10 6- rdaddrecc_i [9:0] $end
$var parameter 32 7- C_DATA_WIDTH [31:0] $end
$var parameter 32 8- C_ADDRB_WIDTH [31:0] $end
$var parameter 32 9- C_HAS_SOFTECC_OUTPUT_REGS_B [31:0] $end
$var parameter 32 :- C_USE_SOFTECC [31:0] $end
$var parameter 32 ;- FLOP_DELAY [31:0] $end
$upscope $end
$scope task write_a $end
$var reg 10 <- addr [9:0] $end
$var reg 1 =- byte_en [0:0] $end
$var reg 32 >- data [31:0] $end
$var reg 1 ?- inj_sbiterr $end
$var reg 1 @- inj_dbiterr $end
$var reg 32 A- current_contents [31:0] $end
$var reg 10 B- address [9:0] $end
$var integer 32 C- i $end
$upscope $end
$scope task write_b $end
$var reg 10 D- addr [9:0] $end
$var reg 1 E- byte_en [0:0] $end
$var reg 32 F- data [31:0] $end
$var reg 32 G- current_contents [31:0] $end
$var reg 10 H- address [9:0] $end
$var integer 32 I- i $end
$upscope $end
$scope task read_a $end
$var reg 10 J- addr [9:0] $end
$var reg 1 K- reset $end
$var reg 10 L- address [9:0] $end
$var integer 32 M- i $end
$upscope $end
$scope task read_b $end
$var reg 10 N- addr [9:0] $end
$var reg 1 O- reset $end
$var reg 10 P- address [9:0] $end
$var integer 32 Q- i $end
$upscope $end
$scope task init_memory $end
$var integer 32 R- i $end
$var integer 32 S- j $end
$var integer 32 T- addr_step $end
$var integer 32 U- status $end
$var reg 32 V- default_data [31:0] $end
$upscope $end
$scope function log2roundup $end
$var integer 32 W- log2roundup $end
$var integer 32 X- data_value $end
$var integer 32 Y- width $end
$var integer 32 Z- cnt $end
$upscope $end
$scope function collision_check $end
$var integer 32 [- collision_check $end
$var reg 10 \- addr_a [9:0] $end
$var integer 32 ]- iswrite_a $end
$var reg 10 ^- addr_b [9:0] $end
$var integer 32 _- iswrite_b $end
$var reg 1 `- c_aw_bw $end
$var reg 1 a- c_aw_br $end
$var reg 1 b- c_ar_bw $end
$var integer 32 c- scaled_addra_to_waddrb_width $end
$var integer 32 d- scaled_addrb_to_waddrb_width $end
$var integer 32 e- scaled_addra_to_waddra_width $end
$var integer 32 f- scaled_addrb_to_waddra_width $end
$var integer 32 g- scaled_addra_to_raddrb_width $end
$var integer 32 h- scaled_addrb_to_raddrb_width $end
$var integer 32 i- scaled_addra_to_raddra_width $end
$var integer 32 j- scaled_addrb_to_raddra_width $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx !
1!!
b0 !"
0!#
0!$
b111 !%
b0 !&
b0 !'
x!(
0!)
b1 !*
x!+
b1100100 !,
b0 !-
1"
0"!
b100000 ""
0"#
0"$
b0 "%
b110000 "&
b0 "'
x"(
bz ")
b1 "*
x"+
b111 ",
b100001101000101 "-
1#
b0 #!
b0 #"
0##
0#$
b1100 #%
b0 #&
b0 #'
x#(
bz #)
b0 #*
bx #+
b100000 #,
b110000 #-
b0 $
b0 $!
0$"
z$#
0$$
b1100 $%
b0 $&
b0 $'
bx $(
b0 $)
b11011100110111101011111011000110110111101100101010111110110011001101001011011000110010101011111011011000110111101100001011001000110010101100100 $*
bx $+
b100000 $,
b0 $-
b0 %
b0 %!
0%"
z%#
0%$
b10 %%
b0 %&
b1100100 %'
bx %(
b0 %)
b100010001101101011001010110110101100101011100100111100100101110011011010110010101101101 %*
bx %+
b100000 %,
b0 %-
1&
0&!
b0 &"
bz &#
0&$
b10 &%
b1 &&
b1 &'
bx &(
b0 &)
b0 &*
bx &+
b10000000000 &,
b100000 &-
1'
b0 '!
b0 '"
0'#
0'$
b10 '%
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 '&
b0 ''
bx '(
b0 ')
b110000 '*
bx '+
b10000000000 ',
b1010 '-
b0 (
0(!
b0 ("
0(#
1($
0(%
b100000 (&
b0 ('
bx ((
b0 ()
b0 (*
b110000 (+
b10000000000 (,
b0 (-
bz )
0)!
b0 )"
z)#
0)$
0)%
b100000 )&
0)'
bx )(
bz ))
b100001101000101 )*
b110000 )+
b1 ),
b0 )-
b0 *
bx *!
b0 *"
z*#
0*$
b0 *%
b10000000000 *&
0*'
bx *(
bz *)
b0 **
b110000 *+
b1 *,
b0 *-
b0 +
bx +!
b0 +"
z+#
0+$
b0 +%
b10000000000 +&
0+'
bx +(
bz +)
b110000 +*
b11011100110111101011111011000110110111101100101010111110110011001101001011011000110010101011111011011000110111101100001011001000110010101100100 ++
b1 +,
b0 +-
b0 ,
bx ,!
bx ,"
z,#
0,$
0,%
b1010 ,&
0,'
1,(
bz ,)
b1 ,*
b100010001101101011001010110110101100101011100100111100100101110011011010110010101101101 ,+
b1 ,,
b0 ,-
bz -
0-!
bx -"
z-#
0-$
0-%
b0 -&
b0 -'
0-(
0-)
b0 -*
b1 -+
b1 -,
b1100100 --
b0 .
b0 .!
bx ."
z.#
0.$
b11 .%
b0 .&
b0 .'
0.(
0.)
b0 .*
b1010 .+
b1 .,
b1 .-
0/
b100 /!
bx /"
z/#
0/$
b0 /%
b0 /&
b0 /'
0/(
0/)
b1 /*
b1010 /+
b1 /,
b0 /-
b0 0
b1 0!
b0 0"
z0#
00$
b0 0%
b0 0&
b0 0'
00(
00)
b10011100100111101011111010000110100100001000001010011100100011101000101 0*
b1010 0+
b1 0,
00-
b0 1
b0 1!
b0 1"
01#
01$
01%
b0 1&
01'
01(
01)
b100000 1*
b1010 1+
b1001 1,
01-
bz 2
12!
b0 2"
b0 2#
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110100 2$
02%
b0 2&
02'
02(
12)
b100000 2*
12+
b1110110011010010111001001110100011001010111100000110111 2,
b0 2-
b100 3
b1 3!
b0 3"
b0 3#
b1110110011010010111001001110100011001010111100000110111 3$
03%
b0 3&
b110000 3'
03(
03)
b10000000000 3*
03+
13,
b0 3-
bz 4
b10 4!
b0 4"
b0 4#
b1110110011010010111001001110100011001010111100000110111 4$
04%
b0 4&
b0 4'
b0 4(
14)
b10000000000 4*
04+
04,
04-
bz 5
b11 5!
b0 5"
05#
b10111000101111 5$
b0 5%
b0 5&
15'
b0 5(
05)
b1010 5*
05+
15,
05-
bz 6
b100 6!
b0 6"
b0 6#
b0 6$
06%
b0 6&
16'
b0 6(
06)
b0 6*
06+
06,
b0 6-
bz 7
b101 7!
b0 7"
b0 7#
b0 7$
07%
b10000010100110001001100 7&
07'
07(
07)
b100001101000101 7*
07+
17,
b100000 7-
bz 8
b110 8!
b0 8"
b0 8#
b1001110010011110100111001000101 8$
b0 8%
b0 8&
b0 8'
08(
08)
b0 8*
18+
08,
b1010 8-
b0 9
b0 9!
b0 9"
b0 9#
b0 9$
b0 9%
b1100100 9&
b0 9'
09(
09)
b110000 9*
09+
09,
b0 9-
bz :
0:!
b0 :"
b0 :#
b0 :$
b0 :%
b0 :&
0:'
0:(
0:)
b0 :*
0:+
b0 :,
b0 :-
b0 ;
b0 ;!
b0 ;"
b0 ;#
b0 ;$
b0 ;%
b0 ;&
0;'
b0 ;(
0;)
b0 ;*
0;+
b0 ;,
b1100100 ;-
b0 <
b0 <!
b0 <"
b0 <#
b0 <$
b0 <%
b0 <&
b1110110011010010111001001110100011001010111100000110111 <'
0<(
0<)
b0 <*
bx <+
b0 <,
b1111111111 <-
0=
b0 =!
b0 ="
b0 =#
b100 =$
x=%
b10000000000000000000000000000001 =&
b1110110011010010111001001110100011001010111100000110111 ='
0=(
0=)
b1 =*
x=+
b0 =,
1=-
1>
b0 >!
b0 >"
b0 >#
b11 >$
0>%
b10000000000000000000000000000001 >&
b1010011010110010100111001000011 >'
0>(
0>)
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 >*
x>+
b0 >,
b0 >-
b0 ?
1?!
b0 ?"
b0 ?#
b1001 ?$
0?%
b10000000000000000000000000000001 ?&
b0 ?'
0?(
0?)
b100000 ?*
bx ?+
b0 ?,
0?-
b100 @
b11 @!
bx @"
0@#
b1 @$
x@%
b1100100 @&
b0 @'
0@(
0@)
b100000 @*
x@+
0@,
0@-
0A
1A!
bx A"
bz A#
b1 A$
xA%
b111 A&
b100001101000101 A'
0A(
0A)
b10000000000 A*
xA+
0A,
b0 A-
b0 B
0B!
bx B"
bz B#
b1 B$
bx B%
b100000 B&
b110000 B'
0B(
0B)
b10000000000 B*
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110100 B+
0B,
b1111111111 B-
b0 C
1C!
bx C"
b0 C#
b100100101001101011001010110110101101111011100100111100100101110011011010110100101100110 C$
b11111111111111111011000111100000 C%
b100000 C&
b0 C'
0C(
0C)
b1010 C*
b1110110011010010111001001110100011001010111100000110111 C+
0C,
bx C-
b0 D
0D!
b10 D"
b0 D#
b100100101001101011001010110110101101111011100100111100100101110011011010110010101101101 D$
bx D%
b100000 D&
b0 D'
b0 D(
0D)
b0 D*
b1110110011010010111001001110100011001010111100000110111 D+
b0 D,
bx D-
b0 E
0E!
b110 E"
b0 E#
b1 E$
b101101100000011 E%
b10000000000 E&
b100000 E'
b0 E(
0E)
b0 E*
b0 E+
0E,
xE-
b0 F
0F!
b1 F"
b0 F#
b110000 F$
bx F%
b10000000000 F&
b1010 F'
b0 F(
0F)
b0 F*
b1001 F+
b0 F,
bx F-
b0 G
0G!
b0 G"
b0 G#
b0 G$
b110000 G%
b10000000000 G&
b0 G'
b0 G(
0G)
b0 G*
b0 G+
b0 G,
bx G-
0H
xH!
1H"
bz H#
b100001101000101 H$
b110000 H%
b1 H&
b0 H'
b0 H(
0H)
b0 H*
b1 H+
b0 H,
bx H-
0I
b100000 I!
b0 I"
bz I#
b0 I$
b110000 I%
b1 I&
b0 I'
0I(
1I)
b0 I*
b1 I+
0I,
bx I-
b0 J
b0 J!
0J"
bz J#
b110000 J$
b100100101001101011001010110110101101111011100100111100100101110011011010110100101100110 J%
b1 J&
b0 J'
zJ(
0J)
b0 J*
b0 J+
0J,
bx J-
b0 K
b0 K!
0K"
bz K#
b1 K$
b100100101001101011001010110110101101111011100100111100100101110011011010110010101101101 K%
b1 K&
b0 K'
b0 K(
0K)
b0 K*
b11011100110111101011111011000110110111101100101010111110110011001101001011011000110010101011111011011000110111101100001011001000110010101100100 K+
b110000 K,
xK-
b0 L
b0 L!
0L"
0L#
b0 L$
b1 L%
b1 L&
b1100100 L'
0L(
b0 L)
b1 L*
b100010001101101011001010110110101100101011100100111100100101110011011010110010101101101 L+
b0 L,
bx L-
b0 M
b0 M!
b0 M"
0M#
b0 M$
b1010 M%
b1 M&
b1 M'
0M(
bz M)
b1 M*
b0 M+
1M,
bx M-
b0 N
b0 N!
0N"
0N#
b1 N$
b1010 N%
b1 N&
b0 N'
0N(
bz N)
b0 N*
b110000 N+
1N,
bx N-
b11 O
0O!
0O"
0O#
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 O$
b1010 O%
b1 O&
0O'
zO(
bz O)
b0 O*
b1010011010110010100111001000011 O+
0O,
xO-
1P
0P!
0P"
0P#
b100000 P$
b1010 P%
b1001 P&
0P'
bz P(
zP)
b0 P*
b0 P+
b0 P,
bx P-
1Q
0Q!
0Q"
1Q#
b100000 Q$
1Q%
b1110110011010010111001001110100011001010111100000110111 Q&
b0 Q'
bz Q(
zQ)
b10000010100110001001100 Q*
b100001101000101 Q+
b0 Q,
bx Q-
0R
0R!
0R"
0R#
b10000000000 R$
0R%
1R&
b0 R'
zR(
zR)
b0 R*
b0 R+
0R,
b10000000000 R-
0S
0S!
b0 S"
1S#
b10000000000 S$
0S%
1S&
0S'
0S(
bz S)
b0 S*
b110000 S+
0S,
bx S-
0T
0T!
b0 T"
0T#
b1010 T$
0T%
0T&
0T'
b0 T(
bz T)
b0 T*
b1 T+
b1110110011010010111001001110100011001010111100000110111 T,
b1 T-
b0 U
b0 U!
b0 U"
0U#
b0 U$
0U%
0U&
b0 U'
b0 U(
bz U)
b0 U*
b0 U+
b1110110011010010111001001110100011001010111100000110111 U,
bx U-
b0 V
b0 V!
0V"
0V#
b100001101000101 V$
0V%
1V&
b100000 V'
b0 V(
bz V)
b0 V*
b0 V+
b1010011010110010100111001000011 V,
b0 V-
0W
b0 W!
0W"
0W#
b0 W$
1W%
0W&
b1010 W'
b0 W(
zW)
b0 W*
b1 W+
b0 W,
b0 W-
b0 X
b0 X!
0X"
0X#
b110000 X$
0X%
0X&
b0 X'
b0 X(
zX)
b0 X*
b10011100100111101011111010000110100100001000001010011100100011101000101 X+
b0 X,
b1 X-
b0 Y
b0 Y!
0Y"
0Y#
b0 Y$
0Y%
b0 Y&
b0 Y'
0Y(
0Y)
b0 Y*
b100000 Y+
b100001101000101 Y,
b0 Y-
b0 Z
b0 Z!
b0 Z"
0Z#
b0 Z$
0Z%
b0 Z&
b1100100 Z'
zZ(
0Z)
b0 Z*
b100000 Z+
b110000 Z,
bx Z-
b1 [
b0 [!
0["
0[#
b0 [$
bx [%
b0 [&
b1000 ['
bz [(
bz [)
b110001 [*
b10000000000 [+
b1 [,
bx [-
0\
b0 \!
0\"
0\#
b1 \$
x\%
b0 \&
1\'
bz \(
bz \)
b110000 \*
b10000000000 \+
b0 \,
bx \-
b11 ]
b0 ]!
0]"
0]#
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 ]$
x]%
b0 ]&
b101101100000011 ]'
bz ](
b0 ])
b100010101110011011101000110100101101101011000010111010001100101011001000010000001010000011011110111011101100101011100100010000001100110011011110111001000100000010010010101000000100000001000000010000000100000001000000011101000100000001000000010000000100000001000000011001000101110001101100011001100110010001101110011001000110101001000000110110101010111 ]*
b1010 ]+
b100000 ],
bx ]-
1^
b0 ^!
0^"
0^#
b100000 ^$
bx ^%
b0 ^&
0^'
z^(
0^)
b0 ^*
b0 ^+
b1010 ^,
bx ^-
1_
b1 _!
0_"
0_#
b100000 _$
x_%
0_&
0_'
z_(
b0 _)
b1100100 _*
b100001101000101 _+
b0 _,
bx _-
0`
b0 `!
0`"
0`#
b10000000000 `$
x`%
0`&
b101101100000011 `'
0`(
0`)
b111 `*
b0 `+
b0 `,
x`-
0a
1a!
0a"
0a#
b10000000000 a$
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110100 a%
0a&
b1000 a'
0a(
0a)
b0 a*
b110000 a+
b0 a,
xa-
0b
b1 b!
0b"
0b#
b1010 b$
b1110110011010010111001001110100011001010111100000110111 b%
0b&
bx b'
0b(
0b)
b1100 b*
b0 b+
b0 b,
xb-
0c
b10 c!
b0 c"
0c#
b0 c$
b1110110011010010111001001110100011001010111100000110111 c%
b0 c&
bx c'
zc(
0c)
b1100 c*
b0 c+
b0 c,
bx c-
b0 d
b11 d!
b0 d"
0d#
b0 d$
b11 d%
0d&
xd'
zd(
0d)
b10 d*
b0 d+
b1100100 d,
bx d-
b0 e
b100 e!
b0 e"
0e#
b0 e$
b1001 e%
b0 e&
bx e'
bz e(
0e)
b10 e*
b1 e+
b1 e,
bx e-
b0 f
b101 f!
b0 f"
0f#
b0 f$
b0 f%
b0 f&
bx f'
0f(
0f)
b10 f*
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 f+
b0 f,
bx f-
b0 g
b110 g!
b0 g"
0g#
b0 g$
b1 g%
b0 g&
bx g'
0g(
1g)
0g*
b100000 g+
b0 g,
bx g-
b0 h
b0 h!
0h"
1h#
b0 h$
b1 h%
0h&
bx h'
zh(
0h)
0h*
b100000 h+
0h,
bx h-
b0 i
b11 i!
zi"
0i#
b0 i$
b1 i%
0i&
bx i'
zi(
0i)
b0 i*
b10000000000 i+
0i,
bx i-
b0 j
b0 j!
b0 j"
0j#
b0 j$
b100100101001101011001010110110101101111011100100111100100101110011011010110100101100110 j%
b110000 j&
xj'
zj(
0j)
bz j*
b10000000000 j+
0j,
bx j-
b0 k
1k!
0k"
b0 k#
b1 k$
b100100101001101011001010110110101101111011100100111100100101110011011010110010101101101 k%
b0 k&
bx k'
zk(
0k)
0k*
b1010 k+
0k,
b0 l
1l!
0l"
b0 l#
b1 l$
b1 l%
1l&
bx l'
zl(
0l)
0l*
b0 l+
b0 l,
b0 m
0m!
0m"
bz m#
b0 m$
b110000 m%
1m&
bx m'
zm(
0m)
b11 m*
b0 m+
b0 m,
b0 n
0n!
zn"
bz n#
b0 n$
b1010011010110010100111001000011 n%
0n&
xn'
zn(
0n)
b0 n*
b0 n+
b0 n,
1o
0o!
bz o"
zo#
b0 o$
b0 o%
b0 o&
bx o'
zo(
0o)
b0 o*
b0 o+
b0 o,
b0 p
b0 p!
bz p"
zp#
b10000010100110001001100 p$
b100001101000101 p%
b0 p&
bx p'
0p(
0p)
0p*
b0 p+
0p,
b0 q
b0 q!
zq"
zq#
b0 q$
b0 q%
0q&
b10000000000 q'
b0 q(
b11000100110110001101011010111110110110101100101011011010101111101100111011001010110111001011111011101100011100001011111001101000101111100110100 q)
0q*
b0 q+
0q,
0r
b0 r!
0r"
bz r#
b0 r$
b110000 r%
0r&
bx r'
bz r(
b1110110011010010111001001110100011001010111100000110111 r)
0r*
b0 r+
b110000 r,
0s
b0 s!
b0 s"
bz s#
b0 s$
b1 s%
b1110110011010010111001001110100011001010111100000110111 s&
b1 s'
b0 s(
b1110110011010010111001001110100011001010111100000110111 s)
0s*
b0 s+
b0 s,
0t
b0 t!
b0 t"
bz t#
b0 t$
b0 t%
b1110110011010010111001001110100011001010111100000110111 t&
b11111111111111111111111111111111 t'
0t(
b10111000101111 t)
b0 t*
b0 t+
1t,
b0 u
b0 u!
b0 u"
bz u#
b0 u$
b0 u%
b1010011010110010100111001000011 u&
b0 u'
b0 u(
b0 u)
0u*
b0 u+
1u,
0v
0v!
b0 v"
zv#
b0 v$
b1 v%
b0 v&
b0 v'
b0 v(
b0 v)
0v*
b10000010100110001001100 v+
0v,
0w
0w!
b0 w"
zw#
b0 w$
b101011101010010010010010101010001000101010111110100011001001001010100100101001101010100 w%
b0 w&
b1 w'
b0 w(
b1001110010011110100111001000101 w)
b0 w*
b0 w+
b0 w,
0x
0x!
0x"
0x#
b0 x$
b100000 x%
b100001101000101 x&
b0 x'
b0 x(
b0 x)
b0 x*
b1100100 x+
b0 x,
b0 y
0y!
zy"
0y#
b0 y$
b100000 y%
b110000 y&
bx y'
b0 y(
b0 y)
b0 y*
b0 y+
0y,
b0 z
0z!
bz z"
bz z#
b110001 z$
b10000000000 z%
b1 z&
bx z'
b0 z(
b0 z)
b0 z*
b0 z+
0z,
0{
b0 {!
bz {"
bz {#
b110000 {$
b10000000000 {%
b0 {&
bx {'
b0 {(
b0 {)
b0 {*
b0 {+
b1110110011010010111001001110100011001010111100000110111 {,
b0 |
b0 |!
bz |"
b0 |#
b100010101110011011101000110100101101101011000010111010001100101011001000010000001010000011011110111011101100101011100100010000001100110011011110111001000100000010010010101000000100000001000000010000000100000001000000011101000100000001000000010000000100000001000000011001000101110001101100011001000110010001000000110110101010111 |$
b1010 |%
b100000 |&
bx |'
b0 |(
b100 |)
x|*
b10000000000000000000000000000001 |+
b1110110011010010111001001110100011001010111100000110111 |,
b0 }
b0 }!
z}"
0}#
b0 }$
b0 }%
b1010 }&
bx }'
b0 }(
b0 })
0}*
b10000000000000000000000000000001 }+
b1010011010110010100111001000011 },
b0 ~
b0 ~!
z~"
b0 ~#
b1100100 ~$
b100001101000101 ~%
b0 ~&
bx ~'
b0 ~(
b1001 ~)
0~*
b10000000000000000000000000000001 ~+
b0 ~,
$end
#100
b0 <+
0=+
1>+
b0 ?+
0@+
0A+
b0 [%
0\%
1]%
b0 ^%
0_%
0`%
#5000
0"
0&
02)
b100000 I!
0Q#
#10000
1"
0#
1&
0'
1)!
b100 *
b1 *%
b100 .!
b1 2#
12)
b1000 3
0>
b1000 @
b1 I"
b0 J-
0K-
b0 L-
1P!
1Q!
1Q#
1W
b11 X
b0 Z
b11 [!
b1 _!
b0 i'
0j'
b1 k#
b0 k'
b0 l#
1r
1v!
#10100
b1000000000010100010011 +
b1000000000010100010011 /%
b1000000000010100010011 4#
b101 ;
b1010 <
b1 [%
b1000000000010100010011 ]&
b1000000000010100010011 ^&
b0 n*
b1000000000010100010011 o&
b0 p&
#15000
0"
0&
02)
0Q#
#20000
1"
1&
b1000 *
b10 *%
b1000 .!
b1110 1!
02!
b10 2#
12)
b1100 3
b100 ;!
b1000000000010100010011 <!
0=
b101 =!
b10011 >!
b1110 ?
b1100 @
b11 @!
0A
1A!
b100 B
0B!
b1010 C
1C!
b101 D
0D!
b1000000000010100010011 E
0E!
0G!
b10 I"
b101 J
b0 J!
b10 K!
b0 L
b10 M
b10 M!
b1010 N
b1010 N!
1Q#
1c
b1010 h!
b1 i'
b1010 j!
b10 k#
b1 k'
b0 l#
b0 p!
b0 q!
1w!
#20100
b1100000000011000010011 +
b1100000000011000010011 /%
b1100000000011000010011 4#
b110 ;
b1100 <
b10 [%
b1100000000011000010011 ]&
b1100000000011000010011 ^&
b0 n*
b1100000000011000010011 o&
b0 p&
#25000
0"
0&
02)
0Q#
#30000
1"
1$"
1&
b1100 *
b0 *"
b11 *%
b0 +"
b1100 .!
b0 0"
b10100 1!
b10 1"
b0 2"
b11 2#
12)
b10000 3
b0 3"
b0 4"
b0 5"
b0 6"
b0 7"
b10 9"
b1000 ;!
b1100000000011000010011 <!
b110 =!
b10011 >!
b10100 ?
b10000 @
0A
b1000 B
b1100 C
b110 D
b1100000000011000010011 E
1H
b11 I"
b110 J
b0 J!
b11 K!
b0 L
b11 M
b11 M!
b1100 N
b1100 N!
1Q#
b1000000000010100010011 U!
b10 V
b100 V!
b10 Y!
b10 Z
b101 Z!
b1010 \!
b10 ^!
b10 `!
0a!
b10 f
b1100 h!
b1000000000010100010011 i
b10 i'
b1100 j!
b11 k#
b10 k'
b0 l#
b100 n
0o
b10 p
b0 p!
b1010 q
b0 q!
#30100
b10011000101001110010110011 +
b10011000101001110010110011 /%
b10011000101001110010110011 4#
b10000011100 ;
b111001 <
b11 [%
b10011000101001110010110011 ]&
b10011000101001110010110011 ^&
b0 n*
b10011000101001110010110011 o&
b0 p&
#35000
0"
0&
02)
0Q#
#40000
1"
b0 #"
b10 %!
1&
0&!
b10000 *
b0 *"
b100 *%
b0 +"
b10 .
b10000 .!
b0 0"
b100001000100 1!
b11 1"
02!
b0 2"
b100 2#
12)
b10100 3
b0 3"
b0 4"
b0 5"
b0 6"
b0 7"
b11 9"
b1100 ;!
b10011000101001110010110011 <!
0=
b10000011100 =!
b110011 >!
b100001000100 ?
b10100 @
b10 @!
0A
0A!
b1100 B
0B!
b100000111000 C
1C!
b10000011100 D
0D!
b10011000101001110010110011 E
0E!
0G!
b100 I"
b10000011100 J
b101 J!
b0 K
b110 K!
b0 L
b10 L)
b100110 M
b100110 M!
bz M)
b11001 N
b111001 N!
b10 O
0P
1Q#
b1100000000011000010011 U!
b11 V
b1000 V!
b11 Y!
b11 Z
b110 Z!
b1100 \!
b10 ]
0^
b11 ^!
b11 `!
0a!
b1010 d
b11 f
b11001 h!
b1100000000011000010011 i
b10 i!
b11 i'
b10 i*
b1000000000010100010011 j
b11001 j!
b10 k
0k!
b100 k#
b11 k'
b0 l#
b1000 n
b11 p
b0 p!
b1100 q
b0 q!
b10 q(
b0 r!
b0 s!
b1000000000010100010011 t!
b1010 u!
0v!
b100 {!
b10 |!
#40100
b1000000101100100010010000110011 +
b1000000101100100010010000110011 /%
b1000000101100100010010000110011 4#
b1000000100 ;
b10000001000 <
b10 <+
b100 [%
b1000000101100100010010000110011 ]&
b1000000101100100010010000110011 ^&
b0 n*
b1000000101100100010010000110011 o&
b0 p&
#45000
0"
0&
02)
0Q#
#50000
1"
b0 #"
b11 %!
1&
b10 &"
b10 '!
b1010 )"
b10100 *
b0 *"
b101 *%
b1111 +"
b0 ,"
b0 -"
b11 .
b10100 .!
b0 ."
b0 /"
b0 0"
b1111 1
b10000011000 1!
b0 1"
b0 2"
b101 2#
12)
b11000 3
b0 3"
b0 4"
b0 5"
b0 6"
b0 7"
b1001 9
b0 9"
b10000 ;!
b1000000101100100010010000110011 <!
b1000000100 =!
b110011 >!
b10000011000 ?
b11000 @
0A
b10000 B
b10000001000 C
b1000000100 D
b1000000101100100010010000110011 E
b1010 F
b10 G
b10 G"
b101 I"
b1000000100 J
b100 J!
b10 J-
b0 K
b1011 K!
b0 L
b11 L)
b10 L-
b10000001011 M
b10000001011 M!
bz M)
b1000 N
b10000001000 N!
0P!
1Q#
b10011000101001110010110011 U!
b100110 V
b1100 V!
0W
b10 X
b100110 Y!
b0 Z
b10000011100 Z!
b10 [!
b11001 \!
b101 ]!
b110 ^!
b1 _!
b0 `!
1a!
b1100 d
b101 e
b110 f
b1000 h!
b10011000101001110010110011 i
b100 i'
b11 i*
b1100000000011000010011 j
b1000 j!
b11 k
b101 k#
b100 k'
b0 l#
b1100 n
1o
b0 p
b0 p!
b11001 q
b0 q!
b11 q(
b0 r!
b0 s!
b1100000000011000010011 t!
b1100 u!
b10 y
b1000 {!
b11 |!
#50100
b110100101001110010110011 +
b110100101001110010110011 /%
b110100101001110010110011 4#
b10000001100 ;
b11001 <
b11 <+
b101 [%
b110100101001110010110011 ]&
b110100101001110010110011 ^&
b0 n*
b110100101001110010110011 o&
b0 p&
#55000
0"
0&
02)
b0 K
b0 L
0Q#
b0 ~
#60000
1"
b0 #"
b0 %!
1&
0&!
b11 &"
b0 '!
b1100 )"
b11000 *
b0 *"
b110 *%
b0 +"
b0 .
b11000 .!
b0 0"
b0 1
b100000101100 1!
b0 1"
b0 2"
b110 2#
12)
b11100 3
b0 3"
b0 4"
b0 5"
b0 6"
b0 7"
b100000010 9
b10100 ;!
b110100101001110010110011 <!
b10000001100 =!
b110011 >!
b100000101100 ?
b11100 @
0A
b10100 B
b100000011000 C
b10000001100 D
b110100101001110010110011 E
b1100 F
b11 G
b0 G"
b110 I"
b10000001100 J
b101 J!
b11 J-
b0 K
b1101 K!
b0 L
b0 L)
b11 L-
b1101 M
b1101 M!
bz M)
b11001 N
b11001 N!
1Q#
b1000000101100100010010000110011 U!
b10000001011 V
b10000 V!
b10000001011 Y!
b0 Z
b1000000100 Z!
b1000 \!
b100 ]!
b1011 ^!
b1 _!
b11001 d
b100 e
b1011 f
b11001 h!
b1000000101100100010010000110011 i
b101 i'
b0 i*
b10011000101001110010110011 j
b11001 j!
b0 k
b110 k#
b101 k'
b0 l#
b10000 n
b0 p!
b1000 q
b0 q!
b0 q(
b0 r!
b0 s!
b10011000101001110010110011 t!
b11001 u!
1v!
b11 y
b1100 {!
b0 |!
#60100
b101100101110010100110011 +
b101100101110010100110011 /%
b101100101110010100110011 4#
b101 ;
b1010 <
b0 <+
b110 [%
b101100101110010100110011 ]&
b101100101110010100110011 ^&
b0 n*
b101100101110010100110011 o&
b0 p&
#65000
0"
0&
02)
b0 K
b0 L
0Q#
b0 ~
#70000
1"
1&
b0 &"
b11001 )"
b11100 *
b111 *%
b11100 .!
b100010 1!
b111 2#
12)
b100000 3
b1 9
b11000 ;!
b101100101110010100110011 <!
b101 =!
b110011 >!
b100010 ?
b100000 @
0A
b11000 B
b1010 C
b101 D
b101100101110010100110011 E
b11001 F
b0 G
b0 G"
b111 I"
b101 J
b101 J!
b0 J-
b1011 K!
b0 L
b1111 L!
b0 L-
b1011 M
b1011 M!
b1010 N
b1010 N!
1Q#
b110100101001110010110011 U!
b1101 V
b10100 V!
b1101 Y!
b0 Z
b10000001100 Z!
b11001 \!
b101 ]!
b1101 ^!
b1 _!
b1000 d
b101 e
b1101 f
b1010 h!
b110100101001110010110011 i
b110 i'
b1000000101100100010010000110011 j
b1010 j!
b111 k#
b110 k'
b0 l#
b10100 n
b0 p!
b11001 q
b0 q!
b0 r!
b0 s!
b1000000101100100010010000110011 t!
b1000 u!
b0 y
b10000 {!
#70100
b101100101110110100110011 +
b101100101110110100110011 /%
b101100101110110100110011 4#
b1101 ;
b11010 <
b111 [%
b101100101110110100110011 ]&
b101100101110110100110011 ^&
b0 n*
b101100101110110100110011 o&
b0 p&
#75000
0"
0&
02)
0Q#
#80000
1"
1&
b1000 )"
b100000 *
b1000 *%
b100000 .!
b110110 1!
b1000 2#
12)
b100100 3
b110 9
b11100 ;!
b101100101110110100110011 <!
b1101 =!
b110011 >!
b110110 ?
b100100 @
b11100 B
b11010 C
b1101 D
b101100101110110100110011 E
b1000 F
b0 G"
b1000 I"
b1101 J
b101 J!
b1011 K!
b0 L!
b1011 M!
b11010 N
b11010 N!
1Q#
b101100101110010100110011 U!
b1011 V
b11000 V!
b1011 Y!
b0 Z
b101 Z!
b100 [
b1010 \!
b1011 ^!
b100 _!
b0 `!
1a!
b11001 d
b1011 f
b11010 h!
b101100101110010100110011 i
b111 i'
b110100101001110010110011 j
b11010 j!
b1000 k#
b111 k'
b0 l#
b11000 n
b0 p!
b1010 q
b0 q!
b110100101001110010110011 t!
b11001 u!
b10100 {!
#80100
b1010000000100011 +
b1010000000100011 /%
b1010000000100011 4#
b0 ;
b0 <
b1000 [%
b1010000000100011 ]&
b1010000000100011 ^&
b0 n*
b1010000000100011 o&
b0 p&
#85000
0"
0&
02)
0Q#
#90000
1"
1&
b11001 )"
b100100 *
b1001 *%
b100100 .!
b100000 1!
b1001 2#
12)
b101000 3
b100000 ;!
b1010000000100011 <!
0=
b0 =!
b100011 >!
b100000 ?
0?!
b101000 @
b0 @!
0A
1A!
b100000 B
1B!
b0 C
0C!
b0 D
0D!
b1010000000100011 E
1E!
b11001 F
0G!
1I
b1001 I"
b0 J
b1 J!
b0 K
b0 K!
b0 L
b0 M
b0 M!
b0 N
b0 N!
b0 O
1P
0Q
1Q#
1T
b101100101110110100110011 U!
b11100 V!
b1101 Z!
b11010 \!
b0 ]
1^
0_
1b
b1010 d
b0 h!
b101100101110110100110011 i
b0 i!
b1000 i'
b101100101110010100110011 j
b0 j!
1k!
b1001 k#
b1000 k'
0l!
b0 l#
b11100 n
1o!
b0 p!
b11010 q
b0 q!
b101100101110010100110011 t!
b1010 u!
b11000 {!
#90100
b101101100000011 +
b101101100000011 /%
b101101100000011 4#
b1011 ;
b10110 <
b1001 [%
b101101100000011 ]&
b101101100000011 ^&
b0 n*
b101101100000011 o&
b0 p&
#95000
0"
0&
02)
0Q#
#100000
1"
1&
b1010 )"
b101000 *
b1010 *%
b101000 .!
b111010 1!
b1010 2#
12)
b101100 3
b10 9
b100100 ;!
b101101100000011 <!
0=
b1011 =!
b11 >!
b111010 ?
b101100 @
b0 @!
0A
1A!
b100100 B
0B!
b10110 C
1C!
b1011 D
1D!
b101101100000011 E
0E!
b1010 F
1G!
b0 G"
0I
b1010 I"
b1011 J
b0 J!
b0 K
b0 K!
b0 M
b0 M!
b10110 N
b10110 N!
1P!
1Q
0Q!
1Q#
1R
1S
0T
1T!
b1010000000100011 U!
b0 V
b100000 V!
1W
b0 X
b0 Y!
b0 Z
b0 Z!
b1 [
b0 [!
b0 \!
b1 ]!
b0 ^!
1_
b1 _!
1`
b0 `!
1a
1a!
0b
b11010 d
b1 e
b0 f
b10110 h!
b1010000000100011 i
b1001 i'
b101100101110110100110011 j
b10110 j!
b1010 k#
b1001 k'
1l!
b0 l#
1m!
b100000 n
1n!
0o!
b0 p!
b0 q
b0 q!
0r
1t
b101100101110110100110011 t!
b11010 u!
b11100 {!
#100100
b0 +
b0 /%
b0 4#
b0 ;
b0 <
b1010 [%
b0 ]&
b0 ^&
b0 n*
b0 o&
b0 p&
#105000
0"
0&
02)
b0 K
b0 L
0Q#
b0 ~
#110000
1"
1&
0&!
b11010 )"
b101100 *
b1011 *%
b101100 .!
1/
b101000 1!
b1011 2#
12)
b110000 3
16+
b101 9
b101000 ;!
b0 <!
0=
b0 =!
b0 >!
b101000 ?
1?!
b110000 @
b11 @!
1A
1A!
b101000 B
0B!
b0 C
1C!
b0 D
0D!
b0 E
0E!
b11010 F
0G!
b0 G"
b1011 I"
b0 J
b0 J!
b0 K!
1K)
b0 L)
b0 M!
bz M)
b0 N
b0 N!
0P
0Q
1Q!
1Q#
0R
1R!
0S
1S!
0T!
b101101100000011 U!
b100100 V!
b1011 Z!
1\
b10110 \!
b11 ]
b0 ]!
b1 _!
0`
0a
0c
b0 d
b0 e
b0 h!
1h*
b101101100000011 i
b1010 i'
b1010000000100011 j
b0 j!
0k!
b1011 k#
b1010 k'
0l!
b0 l#
0m!
b100100 n
0n!
b0 p!
1p(
b10110 q
b0 q!
1r
1s
0t
b1010000000100011 t!
b0 u!
1v
0w!
1z!
b100000 {!
#110100
b0 /%
1=+
b1011 [%
b0 n*
#115000
0"
0&
02)
0Q#
#120000
1"
0$"
1&
0&!
b0 )"
0/
b101100 1!
12)
06+
b0 9
b101100 ;!
b0 <-
bz >-
b101100 ?
0A
bz A-
b101100 B
b0 B-
b0 F
b0 G"
0H
0K)
b0 L)
bz M)
b11 O
1P
0P!
1Q
0Q!
1Q#
0R!
0S!
b0 U!
b101000 V!
0W
b0 Z
b0 Z!
0\
b0 \!
b1 _!
1c
b10110 d
0h*
b0 i
b11 i!
b1011 i'
b101101100000011 j
1k!
b1011 k'
1l!
b101000 n
b0 p!
0p(
b0 q
b0 q!
0r
0s
b101101100000011 t!
b10110 u!
0v
1w
1w!
1x
1x!
1y!
0z!
b100100 {!
#120100
b0 /%
0=+
#125000
0"
0&
02)
0Q#
#130000
1"
1$"
1%"
1&
0&!
b10110 )"
b110000 *
b1100 *%
b110000 .!
0/
b1100 2#
12)
b110100 3
b110100 @
b10110 F
b0 G
1H
b1100 I"
1P!
1Q!
1Q#
b101100 V!
1W
b11 X
b0 Z
b11 [!
b1 _!
0c
b0 d
b0 j
b1100 k#
b0 l#
b101100 n
b0 p!
b0 q!
1r
b0 t!
b0 u!
0w
0w!
0x
0x!
0y!
1{
b101000 {!
#130100
bz ,
b0 /%
bz >,
bz ?,
bz P,
b0 Q,
b1100 [%
bz n*
bz s(
#135000
0"
0&
02)
0Q#
#140000
1"
0$"
0%"
1&
bz ("
b0 )"
b110100 *
b1101 *%
b110100 .!
b110000 1!
b1101 2#
12)
b111000 3
b110000 ;!
b110000 ?
b111000 @
b110000 B
b0 F
b0 G
0H
b1101 I"
1Q#
1c
b1100 i'
b1101 k#
b1100 k'
b0 l#
b0 p!
b0 q!
1w!
bz z
0{
b101100 {!
#140100
b0 /%
b1101 [%
bz n*
#145000
0"
0&
02)
0Q#
#150000
1"
1$"
1&
b111000 *
b1110 *%
b111000 .!
b110100 1!
b1110 2#
12)
b111100 3
b110100 ;!
b110100 ?
b111100 @
b110100 B
1H
b1110 I"
1Q#
b110000 V!
b1101 i'
b1110 k#
b1101 k'
b0 l#
b110000 n
b0 p!
b0 q!
#150100
b0 /%
b1110 [%
bz n*
#155000
0"
0&
02)
0Q#
#160000
1"
1&
b111100 *
b1111 *%
b111100 .!
b111000 1!
b1111 2#
12)
b1000000 3
b111000 ;!
b111000 ?
b1000000 @
b111000 B
b1111 I"
1Q#
b110100 V!
b1110 i'
b1111 k#
b1110 k'
b0 l#
b110100 n
b110000 {!
#160100
b0 /%
b1111 [%
bz n*
#165000
0"
0&
02)
0Q#
#170000
1"
1&
b1000000 *
b10000 *%
b1000000 .!
b111100 1!
b10000 2#
12)
b1000100 3
b111100 ;!
b111100 ?
b1000100 @
b111100 B
b10000 I"
1Q#
b111000 V!
b1111 i'
b10000 k#
b1111 k'
b0 l#
b111000 n
b110100 {!
#170100
b0 /%
b10000 [%
bz n*
#175000
0"
0&
02)
0Q#
#180000
1"
1&
b1000100 *
b10001 *%
b1000100 .!
b1000000 1!
b10001 2#
12)
b1001000 3
b1000000 ;!
b1000000 ?
b1001000 @
b1000000 B
b10001 I"
1Q#
b111100 V!
b10000 i'
b10001 k#
b10000 k'
b0 l#
b111100 n
b111000 {!
#180100
b0 /%
b10001 [%
bz n*
#185000
0"
0&
02)
0Q#
#190000
1"
1&
b1001000 *
b10010 *%
b1001000 .!
b1000100 1!
b10010 2#
12)
b1001100 3
b1000100 ;!
b1000100 ?
b1001100 @
b1000100 B
b10010 I"
1Q#
b1000000 V!
b10001 i'
b10010 k#
b10001 k'
b0 l#
b1000000 n
b111100 {!
#190100
b0 /%
b10010 [%
bz n*
#195000
0"
0&
02)
0Q#
#200000
1"
1&
b1001100 *
b10011 *%
b1001100 .!
b1001000 1!
b10011 2#
12)
b1010000 3
b1001000 ;!
b1001000 ?
b1010000 @
b1001000 B
b10011 I"
1Q#
b1000100 V!
b10010 i'
b10011 k#
b10010 k'
b0 l#
b1000100 n
b1000000 {!
#200100
b0 /%
b10011 [%
bz n*
#205000
0"
0&
02)
0Q#
#210000
1"
1&
b1010000 *
b10100 *%
b1010000 .!
b1001100 1!
b10100 2#
12)
b1010100 3
b1001100 ;!
b1001100 ?
b1010100 @
b1001100 B
b10100 I"
1Q#
b1001000 V!
b10011 i'
b10100 k#
b10011 k'
b0 l#
b1001000 n
b1000100 {!
#210100
b0 /%
b10100 [%
bz n*
#215000
0"
0&
02)
0Q#
#220000
1"
1&
b1010100 *
b10101 *%
b1010100 .!
b1010000 1!
b10101 2#
12)
b1011000 3
b1010000 ;!
b1010000 ?
b1011000 @
b1010000 B
b10101 I"
1Q#
b1001100 V!
b10100 i'
b10101 k#
b10100 k'
b0 l#
b1001100 n
b1001000 {!
#220100
b0 /%
b10101 [%
bz n*
#225000
0"
0&
02)
0Q#
#230000
1"
1&
b1011000 *
b10110 *%
b1011000 .!
b1010100 1!
b10110 2#
12)
b1011100 3
b1010100 ;!
b1010100 ?
b1011100 @
b1010100 B
b10110 I"
1Q#
b1010000 V!
b10101 i'
b10110 k#
b10101 k'
b0 l#
b1010000 n
b1001100 {!
#230100
b0 /%
b10110 [%
bz n*
#235000
0"
0&
02)
0Q#
#240000
1"
1&
b1011100 *
b10111 *%
b1011100 .!
b1011000 1!
b10111 2#
12)
b1100000 3
b1011000 ;!
b1011000 ?
b1100000 @
b1011000 B
b10111 I"
1Q#
b1010100 V!
b10110 i'
b10111 k#
b10110 k'
b0 l#
b1010100 n
b1010000 {!
#240100
b0 /%
b10111 [%
bz n*
#245000
0"
0&
02)
0Q#
#250000
1"
1&
b1100000 *
b11000 *%
b1100000 .!
b1011100 1!
b11000 2#
12)
b1100100 3
b1011100 ;!
b1011100 ?
b1100100 @
b1011100 B
b11000 I"
1Q#
b1011000 V!
b10111 i'
b11000 k#
b10111 k'
b0 l#
b1011000 n
b1010100 {!
#250100
b0 /%
b11000 [%
bz n*
#255000
0"
0&
02)
0Q#
#260000
1"
1&
b1100100 *
b11001 *%
b1100100 .!
b1100000 1!
b11001 2#
12)
b1101000 3
b1100000 ;!
b1100000 ?
b1101000 @
b1100000 B
b11001 I"
1Q#
b1011100 V!
b11000 i'
b11001 k#
b11000 k'
b0 l#
b1011100 n
b1011000 {!
#260100
b0 /%
b11001 [%
bz n*
#265000
0"
0&
02)
0Q#
#270000
1"
1&
b1101000 *
b11010 *%
b1101000 .!
b1100100 1!
b11010 2#
12)
b1101100 3
b1100100 ;!
b1100100 ?
b1101100 @
b1100100 B
b11010 I"
1Q#
b1100000 V!
b11001 i'
b11010 k#
b11001 k'
b0 l#
b1100000 n
b1011100 {!
#270100
b0 /%
b11010 [%
bz n*
#275000
0"
0&
02)
0Q#
#280000
1"
1&
b1101100 *
b11011 *%
b1101100 .!
b1101000 1!
b11011 2#
12)
b1110000 3
b1101000 ;!
b1101000 ?
b1110000 @
b1101000 B
b11011 I"
1Q#
b1100100 V!
b11010 i'
b11011 k#
b11010 k'
b0 l#
b1100100 n
b1100000 {!
#280100
b0 /%
b11011 [%
bz n*
#285000
0"
0&
02)
0Q#
#290000
1"
1&
b1110000 *
b11100 *%
b1110000 .!
b1101100 1!
b11100 2#
12)
b1110100 3
b1101100 ;!
b1101100 ?
b1110100 @
b1101100 B
b11100 I"
1Q#
b1101000 V!
b11011 i'
b11100 k#
b11011 k'
b0 l#
b1101000 n
b1100100 {!
#290100
b0 /%
b11100 [%
bz n*
#295000
0"
0&
02)
0Q#
#300000
1"
1&
b1110100 *
b11101 *%
b1110100 .!
b1110000 1!
b11101 2#
12)
b1111000 3
b1110000 ;!
b1110000 ?
b1111000 @
b1110000 B
b11101 I"
1Q#
b1101100 V!
b11100 i'
b11101 k#
b11100 k'
b0 l#
b1101100 n
b1101000 {!
#300100
b0 /%
b11101 [%
bz n*
#305000
0"
0&
02)
0Q#
#310000
1"
1&
b1111000 *
b11110 *%
b1111000 .!
b1110100 1!
b11110 2#
12)
b1111100 3
b1110100 ;!
b1110100 ?
b1111100 @
b1110100 B
b11110 I"
1Q#
b1110000 V!
b11101 i'
b11110 k#
b11101 k'
b0 l#
b1110000 n
b1101100 {!
#310100
b0 /%
b11110 [%
bz n*
#315000
0"
0&
02)
0Q#
#320000
1"
1&
b1111100 *
b11111 *%
b1111100 .!
b1111000 1!
b11111 2#
12)
b10000000 3
b1111000 ;!
b1111000 ?
b10000000 @
b1111000 B
b11111 I"
1Q#
b1110100 V!
b11110 i'
b11111 k#
b11110 k'
b0 l#
b1110100 n
b1110000 {!
#320100
b0 /%
b11111 [%
bz n*
#325000
0"
0&
02)
0Q#
#330000
1"
1&
b10000000 *
b100000 *%
b10000000 .!
b1111100 1!
b100000 2#
12)
b10000100 3
b1111100 ;!
b1111100 ?
b10000100 @
b1111100 B
b100000 I"
1Q#
b1111000 V!
b11111 i'
b100000 k#
b11111 k'
b0 l#
b1111000 n
b1110100 {!
#330100
b0 /%
b100000 [%
bz n*
#335000
0"
0&
02)
0Q#
#340000
1"
1&
b10000100 *
b100001 *%
b10000100 .!
b10000000 1!
b100001 2#
12)
b10001000 3
b10000000 ;!
b10000000 ?
b10001000 @
b10000000 B
b100001 I"
1Q#
b1111100 V!
b100000 i'
b100001 k#
b100000 k'
b0 l#
b1111100 n
b1111000 {!
#340100
b0 /%
b100001 [%
bz n*
#345000
0"
0&
02)
0Q#
#350000
1"
1&
b10001000 *
b100010 *%
b10001000 .!
b10000100 1!
b100010 2#
12)
b10001100 3
b10000100 ;!
b10000100 ?
b10001100 @
b10000100 B
b100010 I"
1Q#
b10000000 V!
b100001 i'
b100010 k#
b100001 k'
b0 l#
b10000000 n
b1111100 {!
#350100
b0 /%
b100010 [%
bz n*
#355000
0"
0&
02)
0Q#
#360000
1"
1&
b10001100 *
b100011 *%
b10001100 .!
b10001000 1!
b100011 2#
12)
b10010000 3
b10001000 ;!
b10001000 ?
b10010000 @
b10001000 B
b100011 I"
1Q#
b10000100 V!
b100010 i'
b100011 k#
b100010 k'
b0 l#
b10000100 n
b10000000 {!
#360100
b0 /%
b100011 [%
bz n*
#365000
0"
0&
02)
0Q#
#370000
1"
1&
b10010000 *
b100100 *%
b10010000 .!
b10001100 1!
b100100 2#
12)
b10010100 3
b10001100 ;!
b10001100 ?
b10010100 @
b10001100 B
b100100 I"
1Q#
b10001000 V!
b100011 i'
b100100 k#
b100011 k'
b0 l#
b10001000 n
b10000100 {!
#370100
b0 /%
b100100 [%
bz n*
#375000
0"
0&
02)
0Q#
#380000
1"
1&
b10010100 *
b100101 *%
b10010100 .!
b10010000 1!
b100101 2#
12)
b10011000 3
b10010000 ;!
b10010000 ?
b10011000 @
b10010000 B
b100101 I"
1Q#
b10001100 V!
b100100 i'
b100101 k#
b100100 k'
b0 l#
b10001100 n
b10001000 {!
#380100
b0 /%
b100101 [%
bz n*
#385000
0"
0&
02)
0Q#
#390000
1"
1&
b10011000 *
b100110 *%
b10011000 .!
b10010100 1!
b100110 2#
12)
b10011100 3
b10010100 ;!
b10010100 ?
b10011100 @
b10010100 B
b100110 I"
1Q#
b10010000 V!
b100101 i'
b100110 k#
b100101 k'
b0 l#
b10010000 n
b10001100 {!
#390100
b0 /%
b100110 [%
bz n*
#395000
0"
0&
02)
0Q#
#400000
1"
1&
b10011100 *
b100111 *%
b10011100 .!
b10011000 1!
b100111 2#
12)
b10100000 3
b10011000 ;!
b10011000 ?
b10100000 @
b10011000 B
b100111 I"
1Q#
b10010100 V!
b100110 i'
b100111 k#
b100110 k'
b0 l#
b10010100 n
b10010000 {!
#400100
b0 /%
b100111 [%
bz n*
#405000
0"
0&
02)
0Q#
#410000
1"
1&
b10100000 *
b101000 *%
b10100000 .!
b10011100 1!
b101000 2#
12)
b10100100 3
b10011100 ;!
b10011100 ?
b10100100 @
b10011100 B
b101000 I"
1Q#
b10011000 V!
b100111 i'
b101000 k#
b100111 k'
b0 l#
b10011000 n
b10010100 {!
#410100
b0 /%
b101000 [%
bz n*
#415000
0"
0&
02)
0Q#
#420000
1"
1&
b10100100 *
b101001 *%
b10100100 .!
b10100000 1!
b101001 2#
12)
b10101000 3
b10100000 ;!
b10100000 ?
b10101000 @
b10100000 B
b101001 I"
1Q#
b10011100 V!
b101000 i'
b101001 k#
b101000 k'
b0 l#
b10011100 n
b10011000 {!
#420100
b0 /%
b101001 [%
bz n*
#425000
0"
0&
02)
0Q#
#430000
1"
1&
b10101000 *
b101010 *%
b10101000 .!
b10100100 1!
b101010 2#
12)
b10101100 3
b10100100 ;!
b10100100 ?
b10101100 @
b10100100 B
b101010 I"
1Q#
b10100000 V!
b101001 i'
b101010 k#
b101001 k'
b0 l#
b10100000 n
b10011100 {!
#430100
b0 /%
b101010 [%
bz n*
#435000
0"
0&
02)
0Q#
#440000
1"
1&
b10101100 *
b101011 *%
b10101100 .!
b10101000 1!
b101011 2#
12)
b10110000 3
b10101000 ;!
b10101000 ?
b10110000 @
b10101000 B
b101011 I"
1Q#
b10100100 V!
b101010 i'
b101011 k#
b101010 k'
b0 l#
b10100100 n
b10100000 {!
#440100
b0 /%
b101011 [%
bz n*
#445000
0"
0&
02)
0Q#
#450000
1"
1&
b10110000 *
b101100 *%
b10110000 .!
b10101100 1!
b101100 2#
12)
b10110100 3
b10101100 ;!
b10101100 ?
b10110100 @
b10101100 B
b101100 I"
1Q#
b10101000 V!
b101011 i'
b101100 k#
b101011 k'
b0 l#
b10101000 n
b10100100 {!
#450100
b0 /%
b101100 [%
bz n*
#455000
0"
0&
02)
0Q#
#460000
1"
1&
b10110100 *
b101101 *%
b10110100 .!
b10110000 1!
b101101 2#
12)
b10111000 3
b10110000 ;!
b10110000 ?
b10111000 @
b10110000 B
b101101 I"
1Q#
b10101100 V!
b101100 i'
b101101 k#
b101100 k'
b0 l#
b10101100 n
b10101000 {!
#460100
b0 /%
b101101 [%
bz n*
#465000
0"
0&
02)
0Q#
#470000
1"
1&
b10111000 *
b101110 *%
b10111000 .!
b10110100 1!
b101110 2#
12)
b10111100 3
b10110100 ;!
b10110100 ?
b10111100 @
b10110100 B
b101110 I"
1Q#
b10110000 V!
b101101 i'
b101110 k#
b101101 k'
b0 l#
b10110000 n
b10101100 {!
#470100
b0 /%
b101110 [%
bz n*
#475000
0"
0&
02)
0Q#
#480000
1"
1&
b10111100 *
b101111 *%
b10111100 .!
b10111000 1!
b101111 2#
12)
b11000000 3
b10111000 ;!
b10111000 ?
b11000000 @
b10111000 B
b101111 I"
1Q#
b10110100 V!
b101110 i'
b101111 k#
b101110 k'
b0 l#
b10110100 n
b10110000 {!
#480100
b0 /%
b101111 [%
bz n*
#485000
0"
0&
02)
0Q#
#490000
1"
1&
b11000000 *
b110000 *%
b11000000 .!
b10111100 1!
b110000 2#
12)
b11000100 3
b10111100 ;!
b10111100 ?
b11000100 @
b10111100 B
b110000 I"
1Q#
b10111000 V!
b101111 i'
b110000 k#
b101111 k'
b0 l#
b10111000 n
b10110100 {!
#490100
b0 /%
b110000 [%
bz n*
#495000
0"
0&
02)
0Q#
#500000
1"
1&
b11000100 *
b110001 *%
b11000100 .!
b11000000 1!
b110001 2#
12)
b11001000 3
b11000000 ;!
b11000000 ?
b11001000 @
b11000000 B
b110001 I"
1Q#
b10111100 V!
b110000 i'
b110001 k#
b110000 k'
b0 l#
b10111100 n
b10111000 {!
#500100
b0 /%
b110001 [%
bz n*
#505000
0"
0&
02)
0Q#
